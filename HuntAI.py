import streamlit as st
import os
import sys
from dotenv import load_dotenv
import google.generativeai as genai
from PIL import Image
from io import BytesIO
import requests
import time
import json
from urllib.parse import urlparse
import streamlit.components.v1 as components
import yaml
import subprocess
import uuid
import re
import pandas as pd
import logging
import shlex
import zipfile 
import tempfile 
import database
import pandas as pd
from streamlit_option_menu import option_menu

# --- IN√çCIO DA CORRE√á√ÉO: INICIALIZA√á√ÉO DO BANCO DE DADOS ---
# Chame a fun√ß√£o de inicializa√ß√£o aqui, no escopo global do script.
# Isso garante que as tabelas ser√£o criadas ANTES de qualquer outra fun√ß√£o ser chamada.
try:
    database.init_db()
    # Adicionamos uma flag no session_state para sabermos que o DB est√° pronto.
    st.session_state.db_initialized = True 
except Exception as e:
    st.error(f"FALHA CR√çTICA AO INICIALIZAR O BANCO DE DADOS: {e}")
    st.warning("O aplicativo pode n√£o funcionar corretamente. Verifique as permiss√µes da pasta.")
    st.session_state.db_initialized = False
# --- FIM DA CORRE√á√ÉO ---

# --- Configura√ß√µes do LLM (Temperatura Reduzida para Consist√™ncia) ---
LLM_TEMPERATURE = 0.1

st.set_page_config(
    layout="wide",
    page_title="HuntIA - Pentest Suite",  # NOVO: Altera o t√≠tulo da aba do navegador
    page_icon="üïµÔ∏è"  # NOVO: Altera o √≠cone da aba do navegador. Pode ser um emoji ou o caminho para um arquivo de imagem (ex: "images/favicon.png")
)


# --- Configura√ß√£o do Logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', filename='huntia.log')
# logging.getLogger().addHandler(logging.StreamHandler()) # Para ver no console durante o desenvolvimento
# --- Fim Configura√ß√£o do Logging ---

# --- Configura√ß√£o do LLM e APIs ---
load_dotenv()
API_KEY = os.getenv("GOOGLE_API_KEY")

if not API_KEY:
    st.error("ERRO: A vari√°vel de ambiente 'GOOGLE_API_KEY' n√£o est√° configurada.")
    st.info("Por favor, crie um arquivo .env na raiz do seu projeto e adicione 'GOOGLE_API_KEY=SUA_CHAVE_AQUI'.")
    st.info("Voc√™ pode obter sua chave em [https://aistudio.google.com/app/apikey](https://aistudio.google.com/app/apikey)")
    logging.error("GOOGLE_API_KEY n√£o configurada. O aplicativo n√£o pode continuar.")
    st.stop()

# --- Dicion√°rios de Refer√™ncia da OWASP ---
OWASP_TOP_10_2021 = {
    "A01": "Broken Access Control",
    "A02": "Cryptographic Failures",
    "A03": "Injection",
    "A04": "Insecure Design",
    "A05": "Security Misconfiguration",
    "A06": "Vulnerable and Outdated Components",
    "A07": "Identification and Authentication Failures",
    "A08": "Software and Data Integrity Failures",
    "A09": "Security Logging and Monitoring Failures",
    "A10": "Server-Side Request Forgery (SSRF)"
}

OWASP_API_TOP_10_2023 = {
    "API1": "Broken Object Level Authorization (BOLA)",
    "API2": "Broken Authentication",
    "API3": "Broken Object Property Level Authorization",
    "API4": "Unrestricted Resource Consumption",
    "API5": "Broken Function Level Authorization (BFLA)",
    "API6": "Unrestricted Access to Sensitive Business Flows",
    "API7": "Server Side Request Forgery (SSRF)",
    "API8": "Security Misconfiguration",
    "API9": "Improper Inventory Management",
    "API10": "Unsafe Consumption of APIs"
}

# NOVO: OWASP Mobile Top 10 (2024 - vers√£o comum, se houver atualiza√ß√£o, ajuste)
OWASP_MOBILE_TOP_10_2024 = {
    "M1": "Improper Credential Usage",
    "M2": "Insecure Communication",
    "M3": "Insecure Authorization",
    "M4": "Insecure Provisioning",
    "M5": "Insufficient Cryptography",
    "M6": "Insecure Data Storage",
    "M7": "Insecure Authentication",
    "M8": "Insufficient Code Integrity",
    "M9": "Improper Session Handling",
    "M10": "Lack of Binary Protections"
}


OWASP_SUBCATEGORIES = {
    "A01": [
        "Insecure Direct Object References (IDOR)", "Missing Function Level Access Control",
        "Privilege Escalation (Vertical/Horizontal)", "Path Traversal",
        "URL Tampering", "Parameter Tampering"
    ],
    "A02": [
        "Weak Hashing Algorithms", "Use of Outdated/Weak Encryption Protocols (e.g., TLS 1.0/1.1)",
        "Hardcoded Cryptographic Keys", "Improper Key Management",
        "Exposure of Sensitive Data in Transit/At Rest"
    ],
    "A03": [
        "SQL Injection (SQLi)", "Cross-Site Scripting (XSS)",
        "Command Injection", "LDAP Injection", "XPath Injection",
        "NoSQL Injection", "Server-Side Template Injection (SSTI)",
        "Code Injection (e.g., PHP, Python, Java)", "Header Injection (e.g., Host Header Injection)"
    ],
    "A04": [
        "Business Logic Flaws", "Lack of Security Design Principles",
        "Trust Boundary Violations", "Feature Overload",
        "Insecure Direct Object References (IDOR) - (also A01, design aspect)"
    ],
    "A05": [
        "Default Passwords/Configurations", "Unnecessary Features/Services Enabled",
        "Improper File/Directory Permissions", "Missing Security Headers",
        "Error Messages Revealing Sensitive Information", "Open Cloud Storage Buckets"
    ],
    "A06": [
        "Using Libraries/Frameworks with Known Vulnerabilities", "Outdated Server Software (e.g., Apache, Nginx, IIS)",
        "Client-Side Libraries with Vulnerabilities", "Lack of Patch Management"
    ],
    "A07": [
        "Weak Password Policies", "Missing Multi-Factor Authentication (MFA)",
        "Session Management Flaws (e.g., fixed session IDs)", "Improper Credential Recovery Mechanisms",
        "Brute-Force Attacks (lack of rate limiting)"
    ],
    "A08": [
        "Insecure Deserialization", "Lack of Integrity Checks on Updates/Packages",
        "Weak Digital Signatures", "Client-Side Trust (e.g., relying on client-side validation)"
    ],
    "A09": [
        "Insufficient Logging of Security Events", "Lack of Alerting on Suspicious Activities",
        "Inadequate Retention of Logs", "Logs Not Protected from Tampering"
    ],
    "A10": "Server-Side Request Forgery (SSRF)"
}


# --- Fun√ß√µes Auxiliares Comuns ---

def get_verbosity_prompt():
    """Retorna a instru√ß√£o de prompt baseada na verbosidade selecionada."""
    verbosity = st.session_state.get('llm_verbosity', "Detalhado (T√©cnico)")
    
    if verbosity == "Conciso (Resumo Executivo)":
        return "Instru√ß√£o de Verbosidade: Seja extremamente conciso e foque no impacto para o neg√≥cio. Evite jarg√µes t√©cnicos profundos. A resposta deve ser adequada para um executivo (C-Level)."
    elif verbosity == "Super Detalhado (Educacional)":
        return "Instru√ß√£o de Verbosidade: Seja extremamente detalhado em suas explica√ß√µes. Defina cada conceito t√©cnico como se estivesse ensinando um iniciante. Forne√ßa m√∫ltiplos exemplos e um contexto aprofundado."
    else: # Padr√£o: "Detalhado (T√©cnico)"
        return "Instru√ß√£o de Verbosidade: Forne√ßa uma resposta t√©cnica completa e precisa, adequada para uma equipe de desenvolvimento ou seguran√ßa. Use jarg√µes t√©cnicos apropriadamente."


def get_log_file_content(log_file_path='huntia.log'):
    """L√™ o conte√∫do do arquivo de log."""
    if os.path.exists(log_file_path):
        with open(log_file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.read()
    return "Log file not found."


def is_valid_url(url_string):
    """Verifica se a string √© uma URL bem formada."""
    if not url_string:
        return False
    try:
        result = urlparse(url_string)
        # Verifica se h√° esquema (http, https) e network location (dom√≠nio)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False


def get_gemini_models_cached():
    if 'llm_models' not in st.session_state:
        st.session_state.llm_models = {'vision_model': None, 'text_model': None, 'initialized': False}

    if not st.session_state.llm_models['initialized']:
        genai.configure(api_key=API_KEY)

        llm_model_vision_temp = None
        llm_model_text_temp = None

        vision_model_priority = ["gemini-1.5-flash", "gemini-1.5-pro", "gemini-pro-vision"]
        text_model_priority = ["gemini-1.5-flash", "gemini-1.5-pro", "gemini-pro"]

        try:
            available_models = list(genai.list_models())

            for preferred_name in vision_model_priority:
                for m in available_models:
                    if preferred_name in m.name and 'generateContent' in m.supported_generation_methods:
                        llm_model_vision_temp = genai.GenerativeModel(m.name)
                        break
                if llm_model_vision_temp:
                    break

            for preferred_name in text_model_priority:
                for m in available_models:
                    if preferred_name in m.name and 'generateContent' in m.supported_generation_methods:
                        llm_model_text_temp = genai.GenerativeModel(m.name, generation_config={"temperature": LLM_TEMPERATURE})
                        break
                if llm_model_text_temp:
                    break

            if not llm_model_vision_temp:
                st.error("ERRO: Nenhum modelo LLM de vis√£o adequado (gemini-1.5-flash/pro ou gemini-pro-vision) encontrado.")
                st.info("Por favor, configure sua GOOGLE_API_KEY e verifique a disponibilidade de modelos no Google AI Studio.")
                logging.error("Nenhum modelo LLM de vis√£o adequado encontrado.")
            if not llm_model_text_temp:
                st.error("ERRO: Nenhum modelo LLM de texto adequado (gemini-1.5-flash/pro ou gemini-pro) encontrado.")
                st.info("Por favor, configure sua GOOGLE_API_KEY e verifique a disponibilidade de modelos no Google AI Studio.")
                logging.error("Nenhum modelo LLM de texto adequado encontrado.")

        except Exception as e:
            st.error(f"ERRO ao listar ou selecionar modelos do Gemini: {e}")
            st.info("Verifique sua conex√£o com a internet e sua GOOGLE_API_KEY.")
            logging.exception("Erro ao listar ou selecionar modelos do Gemini.")

        st.session_state.llm_models['vision_model'] = llm_model_vision_temp
        st.session_state.llm_models['text_model'] = llm_model_text_temp
        st.session_state.llm_models['initialized'] = True
    
    return st.session_state.llm_models['vision_model'], st.session_state.llm_models['text_model']


def obter_resposta_llm(model_instance, prompt_parts):
    if model_instance is None:
        st.error("Erro: O modelo LLM n√£o foi inicializado corretamente. N√£o √© poss√≠vel gerar conte√∫do.")
        logging.error("Tentativa de gerar conte√∫do com modelo LLM n√£o inicializado.")
        return None
    try:
        response = model_instance.generate_content(prompt_parts)
        logging.info(f"Resposta do LLM obtida com sucesso do modelo {model_instance.model_name}.")
        return response.text
    except Exception as e:
        st.error(f"Erro ao comunicar com o LLM: {e}")
        st.info("Verifique se a sua conex√£o com a internet est√° ativa e se o modelo LLM est√° funcionando.")
        logging.exception(f"Erro ao comunicar com o LLM {model_instance.model_name}.")
        return None

def formatar_resposta_llm(resposta_bruta):
    return resposta_bruta

@st.cache_data(show_spinner=False)

def mapear_falha_para_owasp(_llm_text_model, falha_input):
    owasp_list = "\n".join([f"{code}: {name}" for code, name in OWASP_TOP_10_2021.items()])

    prompt = (
        f"Qual categoria da OWASP Top 10 (2021) melhor representa a vulnerabilidade ou t√©cnica de ataque '{falha_input}'?"
        f"\n\nConsidere a seguinte lista de categorias OWASP Top 10 (2021):"
        f"\n{owasp_list}"
        f"\n\nSe a entrada for um nome de falha espec√≠fica (como 'XSS', 'SQL Injection', 'IDOR'), identifique a categoria correta e retorne apenas o C√ìDIGO (ex: A03)."
        f"Se a entrada for j√° um c√≥digo OWASP (ex: 'A01'), retorne-o diretamente."
        f"Se n√£o tiver certeza ou se n√£o se encaixar em nenhuma categoria clara, responda 'INDEFINIDO'."
        f"\nExemplos: 'SQL Injection' -> 'A03', 'Cross-Site Scripting' -> 'A03', 'IDOR' -> 'A01', 'Broken Access Control' -> 'A01', 'Clickjacking' -> 'A04', 'A03' -> 'A03'."
        f"\nResposta esperada √© APENAS o c√≥digo OWASP."
    )

    with st.spinner(f"Tentando mapear '{falha_input}' para uma categoria OWASP..."):
        logging.info(f"Tentando mapear '{falha_input}' para categoria OWASP.")
        resposta = obter_resposta_llm(_llm_text_model, [prompt])

    if resposta:
        codigo_owasp = resposta.strip().upper().split(':')[0].split(' ')[0]
        if codigo_owasp in OWASP_TOP_10_2021:
            logging.info(f"Mapeado '{falha_input}' para OWASP {codigo_owasp}.")
            return codigo_owasp
        elif codigo_owasp == "INDEFINIDO":
            st.warning("O LLM n√£o conseguiu mapear a falha para uma categoria OWASP espec√≠fica.")
            logging.warning(f"LLM n√£o mapeou '{falha_input}' para categoria OWASP (INDEFINIDO).")
            return None
        else:
            st.warning(f"O LLM retornou um c√≥digo inesperado: '{codigo_owasp}'.")
            logging.warning(f"LLM retornou c√≥digo inesperado '{codigo_owasp}' para '{falha_input}'.")
            return None
    logging.warning(f"Nenhuma resposta do LLM para mapeamento OWASP de '{falha_input}'.")
    return None

def parse_vulnerability_summary(text_response):
    summary = {
        "Total": 0, "Cr√≠ticas": 0, "Altas": 0, "M√©dias": 0, "Baixas": 0
    }

    lines = text_response.split('\n')
    summary_line_found = False
    parsed_content = []

    for i, line in enumerate(lines):
        # Esta √© a linha que procura pela linha de resumo.
        # Adicione "Total de Achados Mobile:" para garantir que o parser encontre a linha no caso mobile.
        if ("Total de Vulnerabilidades:" in line or "Total de Amea√ßas:" in line or \
            "Total de Vulnerabilidades API:" in line or "Total de Insights:" in line or \
            "Total de Eventos:" in line or "Total de Achados:" in line or \
            "Total de Achados de Valida√ß√£o:" in line or "Total de Achados Mobile:" in line or \
            "Total Achados:" in line) and not summary_line_found: # Adicione "Total Achados:" para o caso espec√≠fico da imagem
            summary_line = line
            summary_line_found = True
        else:
            parsed_content.append(line)

    if summary_line_found:
        # Usar regexes mais flex√≠veis para capturar os n√∫meros ap√≥s os r√≥tulos
        total_match = re.search(r'Total(?: de Achados| de Vulnerabilidades| de Amea√ßas| de Insights| de Eventos| de Achados de Valida√ß√£o| Mobile)?:\s*(\d+)', summary_line)
        crit_match = re.search(r'Cr√≠ticas?:\s*(\d+)', summary_line) # Suporta Cr√≠ticas: ou Cr√≠ticos:
        altas_match = re.search(r'Altas?:\s*(\d+)', summary_line) # Suporta Altas: ou Altos:
        medias_match = re.search(r'M√©dios?:\s*(\d+)', summary_line) # Suporta M√©dias: ou M√©dios:
        baixas_match = re.search(r'Baixas?:\s*(\d+)', summary_line) # Suporta Baixas: ou Baixos:

        if total_match:
            summary["Total"] = int(total_match.group(1))
        if crit_match:
            summary["Cr√≠ticas"] = int(crit_match.group(1))
        if altas_match:
            summary["Altas"] = int(altas_match.group(1))
        if medias_match:
            summary["M√©dias"] = int(medias_match.group(1))
        if baixas_match:
            summary["Baixas"] = int(baixas_match.group(1))
            
        # Para os campos de valida√ß√£o de pentest (se ainda forem usados, mantenha)
        cobertura_alta_match = re.search(r'Cobertura Alta:\s*(\d+)', summary_line)
        cobertura_media_match = re.search(r'Cobertura M√©dia:\s*(\d+)', summary_line)
        cobertura_baixa_match = re.search(r'Cobertura Baixa:\s*(\d+)', summary_line)
        lacunas_match = re.search(r'Lacunas:\s*(\d+)', summary_line)

        if cobertura_alta_match:
            summary["Cobertura Alta"] = int(cobertura_alta_match.group(1))
        if cobertura_media_match:
            summary["Cobertura M√©dia"] = int(cobertura_media_match.group(1))
        if cobertura_baixa_match:
            summary["Cobertura Baixa"] = int(cobertura_baixa_match.group(1))
        if lacunas_match:
            summary["Lacunas"] = int(lacunas_match.group(1))

    return summary, "\n".join(parsed_content).strip()

def parse_raw_http_request(raw_request):
    method = ""
    path = ""
    full_url = ""
    headers = {}
    body = ""

    lines = raw_request.splitlines()

    # Parse first line (method, path, HTTP version)
    if lines and lines[0].strip():
        first_line_parts = lines[0].split(' ')
        if len(first_line_parts) >= 2:
            method = first_line_parts[0].strip()
            path = first_line_parts[1].strip()

    body_started = False
    for line in lines[1:]:
        if not line.strip() and not body_started: # Empty line indicates end of headers, start of body
            body_started = True
            continue

        if not body_started: # Still parsing headers
            if ':' in line:
                key, value = line.split(':', 1)
                headers[key.strip()] = value.strip()
        else: # Parsing body
            body += line + '\n'

    # Try to construct full_url from Host header and path
    if 'Host' in headers and path:
        host = headers['Host']
        # Determine scheme based on common ports or explicitly in request line
        scheme = "https" if "443" in host or raw_request.lower().splitlines()[0].startswith("https") else "http"
        # Handle cases where path might already include domain, or just be a root path
        if path.startswith('http://') or path.startswith('https://'):
            full_url = path # Path is already a full URL
        elif path.startswith('/'):
            full_url = f"{scheme}://{host}{path}"
        else: # Relative path without leading slash, assume it follows host directly
            full_url = f"{scheme}://{host}/{path}" # Add a slash for safety

    return {
        "method": method,
        "path": path,
        "full_url": full_url,
        "headers": headers,
        "body": body.strip()
    }


# --- Fun√ß√µes das "P√°ginas" --- (Defini√ß√£o de todas as fun√ß√µes antes de main())

def home_page():
    st.header("Bem-vindo ao HuntIA - Plataforma de Seguran√ßa üõ°Ô∏è")
    st.markdown("---")
    
    # Mensagem de status para guiar o usu√°rio sobre como come√ßar
    st.info("""
        **Comece pela p√°gina de 'Configura√ß√µes' na barra lateral para:**
        - Criar ou selecionar um projeto para salvar seu trabalho.
        - Ativar o 'Modo Rascunho' para an√°lises r√°pidas e n√£o salvas.
        - Definir o contexto global do pentest (Perfil do Atacante e Cen√°rio).
    """)

    st.markdown("""
        ### Sua su√≠te de reconhecimento e pentest inteligente, com o poder do LLM!
        
        Ap√≥s configurar sua sess√£o, selecione uma das ferramentas na barra lateral para iniciar sua an√°lise.
    """)
    logging.info("P√°gina inicial acessada.")

def get_global_context_prompt():
    """Retorna a string de contexto global a ser injetada nos prompts do LLM."""
    profile = st.session_state.get('global_profile', "Nenhum")
    scenario = st.session_state.get('global_scenario', "Nenhum")
    
    context_parts = []
    if profile != "Nenhum":
        context_parts.append(f"com um perfil de atacante '{profile}'")
    if scenario != "Nenhum":
        context_parts.append(f"em um cen√°rio de ataque de '{scenario}'")
    
    if context_parts:
        # Instru√ß√£o mais detalhada para o LLM usar o contexto
        return f"Considere-se atuando como um pentester {', e '.join(context_parts)}. Ajuste suas respostas com base nesse conhecimento, fornecendo retornos como se fosse um especialista nesse contexto, priorizando a profundidade e o tipo de vulnerabilidades, m√©todos de explora√ß√£o e mitiga√ß√µes que seriam relevantes para esse contexto espec√≠fico."
    return "Considere-se um pentester gen√©rico e experiente, fornecendo respostas abrangentes." # Contexto padr√£o se nada for selecionado

# C√ìDIGO ATUALIZADO para correlation_dashboard_page
def settings_page():
    st.header("Configura√ß√µes Globais e Gerenciamento de Projetos ‚öôÔ∏è")
    st.markdown("---")

    # --- Se√ß√£o de Controle de Comportamento do LLM ---
    st.subheader("Controle de Comportamento do LLM")

    # Inicializa o estado da verbosidade se n√£o existir
    if 'llm_verbosity' not in st.session_state:
        st.session_state.llm_verbosity = "Detalhado (T√©cnico)" # Valor padr√£o

    st.session_state.llm_verbosity = st.selectbox(
        "Modo de Verbosidade do Relat√≥rio:",
        options=["Conciso (Resumo Executivo)", "Detalhado (T√©cnico)", "Super Detalhado (Educacional)"],
        index=["Conciso (Resumo Executivo)", "Detalhado (T√©cnico)", "Super Detalhado (Educacional)"].index(st.session_state.llm_verbosity),
        help="Define o n√≠vel de detalhe das respostas do LLM em toda a aplica√ß√£o."
    )
    st.markdown("---")
    
    # --- Se√ß√£o de Modo de Opera√ß√£o ---
    st.subheader("Modo de Opera√ß√£o")
    
    if 'modo_rascunho' not in st.session_state: 
        st.session_state.modo_rascunho = True

    st.session_state.modo_rascunho = st.checkbox(
        "Ativar Modo Rascunho (N√£o Salvar An√°lises)", 
        value=st.session_state.modo_rascunho,
        help="Quando ativado, voc√™ pode usar as ferramentas sem selecionar um projeto, e os resultados n√£o ser√£o salvos no banco de dados."
    )

    if st.session_state.modo_rascunho:
        st.info("Modo Rascunho Ativo ‚úèÔ∏è: Os resultados das an√°lises n√£o ser√£o salvos.")
    else:
        st.success("Modo de Projeto Ativo üíæ: Os resultados das an√°lises ser√£o salvos no projeto selecionado.")
    
    st.markdown("---")

    # --- Se√ß√£o do Gerenciador de Projetos ---
    st.subheader("Gerenciador de Projetos")

    is_disabled = st.session_state.modo_rascunho

    if is_disabled:
        st.warning("O gerenciamento de projetos est√° desabilitado pois o Modo Rascunho est√° ativo.")

    lista_de_projetos = database.listar_projetos()
    opcoes_projetos = {nome: id for id, nome in lista_de_projetos}
    nomes_projetos_para_selectbox = ["Nenhum"] + list(opcoes_projetos.keys())

    try:
        index_selecionado = nomes_projetos_para_selectbox.index(st.session_state.projeto_ativo_nome) if st.session_state.projeto_ativo_nome else 0
    except ValueError:
        index_selecionado = 0

    col1, col2 = st.columns(2)
    with col1:
        projeto_selecionado_nome = st.selectbox(
            "Selecione um Projeto Ativo:",
            options=nomes_projetos_para_selectbox,
            index=index_selecionado,
            key="project_selector_settings_page",
            disabled=is_disabled
        )

        if not is_disabled:
            if projeto_selecionado_nome and projeto_selecionado_nome != "Nenhum":
                if st.session_state.projeto_ativo_nome != projeto_selecionado_nome:
                    st.session_state.projeto_ativo_id = opcoes_projetos[projeto_selecionado_nome]
                    st.session_state.projeto_ativo_nome = projeto_selecionado_nome
                    logging.info(f"Projeto '{projeto_selecionado_nome}' selecionado.")
                    st.rerun()
            elif st.session_state.projeto_ativo_nome and projeto_selecionado_nome == "Nenhum":
                st.session_state.projeto_ativo_id = None
                st.session_state.projeto_ativo_nome = None
                st.rerun()
    
    with col2:
        novo_projeto_nome = st.text_input("Ou crie um novo projeto:", key="new_project_input_settings_page", disabled=is_disabled)
        if st.button("Criar Projeto", key="create_project_button_settings_page", disabled=is_disabled):
            if novo_projeto_nome:
                sucesso, novo_projeto_id, mensagem = database.criar_projeto(novo_projeto_nome)
                if sucesso:
                    st.toast(mensagem, icon="üéâ")
                    st.session_state.projeto_ativo_nome = novo_projeto_nome
                    st.session_state.projeto_ativo_id = novo_projeto_id
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(mensagem)
            else:
                st.warning("Digite um nome para o novo projeto.")
    
    st.markdown("---")

    # --- Se√ß√£o de Contexto Global ---
    st.subheader("Contexto da An√°lise (Engenharia de Prompt)")
    col_profile, col_scenario = st.columns(2)

    with col_profile:
        st.session_state.global_profile = st.selectbox(
            "Perfil do Atacante:",
            options=["Nenhum", "Novato", "Experiente", "APT (Advanced Persistent Threat)"],
            index=["Nenhum", "Novato", "Experiente", "APT (Advanced Persistent Threat)"].index(st.session_state.get('global_profile', 'Nenhum')),
            key="global_profile_select_settings"
        )
    with col_scenario:
        st.session_state.global_scenario = st.selectbox(
            "Cen√°rio de Ataque:",
            options=["Nenhum", "Acesso Interno", "Acesso Externo (Internet)", "Phishing", "Red Team Exercise"],
            index=["Nenhum", "Acesso Interno", "Acesso Externo (Internet)", "Phishing", "Red Team Exercise"].index(st.session_state.get('global_scenario', 'Nenhum')),
            key="global_scenario_select_settings"
        )

def correlation_dashboard_page(llm_model_text):
    st.header("Correlation Dashboard: Conectando os Pontos üß†")
    st.markdown("""
        Esta p√°gina atua como o c√©rebro central do seu projeto. Ela agrega os resultados de todas as outras
        ferramentas e usa o LLM para identificar correla√ß√µes de risco e vetores de ataque combinados
        que poderiam passar despercebidos em an√°lises isoladas.
    """)
    logging.info("P√°gina Correlation Dashboard acessada.")

    if 'correlation_result' not in st.session_state:
        st.session_state.correlation_result = ""

    if not st.session_state.get('projeto_ativo_id'):
        st.error("Por favor, selecione ou crie um projeto na barra lateral para usar este m√≥dulo.")
        st.stop()
    
    st.info(f"Analisando correla√ß√µes para o projeto: **{st.session_state.projeto_ativo_nome}**")

    # 1. Agrega√ß√£o de Dados do Projeto Ativo
    st.subheader("1. Resumo dos Dados Coletados para o Projeto")
    
    # Carregar todas as an√°lises salvas do banco de dados para o projeto atual
    analises_salvas = database.carregar_analises_do_projeto(st.session_state.projeto_ativo_id)
    
    dados_agregados_para_prompt = []
    dados_para_exibir = []

    if not analises_salvas:
        st.warning("Nenhuma an√°lise foi salva neste projeto ainda. Por favor, use as outras ferramentas primeiro para gerar dados.")
        st.stop()

    # --- IN√çCIO DA MODIFICA√á√ÉO (Processar os novos tipos de an√°lise) ---
    for tipo_analise, resumo_input, resultado_completo in analises_salvas:
        # Adiciona um resumo para exibi√ß√£o no dashboard
        dados_para_exibir.append(f"**Fonte:** `{tipo_analise}`\n**Input:** {resumo_input}\n")
        
        # Adiciona um resumo mais detalhado para o prompt do LLM
        # Para an√°lises de texto, o resumo do input √© suficiente
        if tipo_analise in ["OWASP Vulnerability Details", "Static Code Analyzer", "OpenAPI Analyzer"]:
             dados_agregados_para_prompt.append(f"**Achado de '{tipo_analise}':**\n{resumo_input}\n")
        # Para o Deep HTTP Insight, podemos extrair a tabela de riscos para o prompt
        elif tipo_analise == "Deep HTTP Insight":
            tabela_riscos_match = re.search(r"## Tabela de Riscos\n(.*?)(?=\n##|\Z)", resultado_completo, re.DOTALL | re.IGNORECASE)
            if tabela_riscos_match:
                tabela_formatada = tabela_riscos_match.group(1).strip()
                dados_agregados_para_prompt.append(f"**Achado de '{tipo_analise}':**\n{resumo_input}\n**Tabela de Riscos Identificados:**\n{tabela_formatada}\n")
            else:
                dados_agregados_para_prompt.append(f"**Achado de '{tipo_analise}':**\n{resumo_input}\n")
        else:
            # Fallback para outros tipos de an√°lise
            dados_agregados_para_prompt.append(f"**Achado de '{tipo_analise}':**\n{resumo_input}\n")
    # --- FIM DA MODIFICA√á√ÉO ---

    with st.expander("Clique para ver os dados agregados que ser√£o enviados para an√°lise"):
        for dado in dados_para_exibir:
            st.markdown(dado)
            st.markdown("---")

    st.subheader("2. An√°lise de Correla√ß√£o de Risco")
    if st.button("Analisar Correla√ß√µes", key="analyze_correlations_button"):
        with st.spinner("O HuntIA est√° pensando e conectando os pontos..."):
            logging.info(f"Correlation Dashboard: Iniciando an√°lise de correla√ß√£o para o projeto ID {st.session_state.projeto_ativo_id}.")
            
            global_context_prompt = get_global_context_prompt()
            
            correlation_prompt = (
                "Voc√™ √© um analista de seguran√ßa s√™nior e um 'Threat Hunter', especializado em conectar pontos e identificar vetores de ataque complexos."
                f"{global_context_prompt}\n\n"
                "A seguir est√£o os resumos de v√°rias an√°lises de seguran√ßa realizadas em um mesmo projeto. "
                "Sua miss√£o √© atuar como um 'meta-analisador'. Analise TODOS os achados em conjunto. "
                "Sua tarefa N√ÉO √© repetir os achados, mas sim encontrar **correla√ß√µes, depend√™ncias e vetores de ataque combinados** que um analista olhando para cada ferramenta isoladamente poderia perder.\n\n"
                "**Dados Agregados para An√°lise:**\n"
                "```\n"
                f"{'\n\n'.join(dados_agregados_para_prompt)}"
                "\n```\n\n"
                "**Formato da Resposta:**\n"
                "Forne√ßa sua an√°lise em uma lista de vetores de ataque correlacionados. Para cada um, use o seguinte formato Markdown:\n\n"
                "### Vetor de Ataque Correlacionado #[N√∫mero]\n"
                "**Descri√ß√£o do Vetor:** (Descreva o cen√°rio de ataque combinado de forma clara e concisa).\n"
                "**Pontos de Conex√£o:** (Explique exatamente quais achados de diferentes ferramentas se conectam. Ex: 'A resposta HTTP do *Deep HTTP Insight* mostrou um cabe√ßalho 'Server: Apache/2.4.29'. A consulta no *OWASP Vulnerability Details* sobre 'vulnerabilidades Apache 2.4.29' pode revelar exploits conhecidos para esta vers√£o.').\n"
                "**Pr√≥ximo Passo T√°tico Sugerido:** (Sugira a pr√≥xima a√ß√£o pr√°tica que um pentester deveria tomar. Ex: 'Use o Tactical Command Orchestrator para gerar um comando `nmap -sV --script http-vuln-cve*` contra o alvo para confirmar as vulnerabilidades conhecidas.').\n"
                "**N√≠vel de Risco da Correla√ß√£o:** [Cr√≠tico/Alto/M√©dio]\n"
                "---"
            )

            correlation_raw = obter_resposta_llm(llm_model_text, [correlation_prompt])
            
            if correlation_raw:
                st.session_state.correlation_result = correlation_raw
                logging.info(f"Correlation Dashboard: An√°lise de correla√ß√£o conclu√≠da com sucesso para o projeto ID {st.session_state.projeto_ativo_id}.")
                # Salva a pr√≥pria an√°lise de correla√ß√£o no banco de dados
                try:
                    database.salvar_analise(
                        projeto_id=st.session_state.projeto_ativo_id,
                        tipo_analise="Correlation Analysis",
                        resumo_input=f"Correla√ß√£o baseada em {len(dados_para_exibir)} achados do projeto.",
                        resultado_completo=correlation_raw
                    )
                    st.toast("An√°lise de correla√ß√£o salva no projeto!", icon="üß†")
                except Exception as e:
                    st.error(f"Houve um erro ao salvar a an√°lise de correla√ß√£o no banco de dados: {e}")
            else:
                st.session_state.correlation_result = "N√£o foi poss√≠vel obter uma an√°lise de correla√ß√£o. Tente novamente."
                logging.error(f"Correlation Dashboard: Falha ao obter an√°lise de correla√ß√£o do LLM para o projeto ID {st.session_state.projeto_ativo_id}.")
                
    if st.session_state.correlation_result:
        st.markdown(st.session_state.correlation_result)
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="correlation_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback Correlation Dashboard: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="correlation_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback Correlation Dashboard: Precisa de Melhoria.")

def owasp_scout_visual_page(llm_model_vision, llm_model_text):
    st.header("OWASP Image Analyzer: An√°lise de Vulnerabilidades em Imagens üëÅÔ∏è")
    st.markdown("""
        Envie um print, um trecho de c√≥digo em imagem, ou qualquer diagrama e pergunte ao HuntIA se ele detecta vulnerabilidades OWASP Top 10.
        Quanto mais detalhes na sua pergunta, melhor a an√°lise!
    """)
    logging.info("P√°gina OWASP Image Analyzer acessada.")

    # --- In√≠cio do Bloco Universal de Verifica√ß√£o ---
    if not st.session_state.get('projeto_ativo_id') and not st.session_state.get('modo_rascunho'):
        st.error("Por favor, selecione um projeto ou ative o 'Modo Rascunho' na p√°gina de Configura√ß√µes.")
        st.stop()
    
    if st.session_state.get('modo_rascunho'):
        st.info("Voc√™ est√° no Modo Rascunho. Esta an√°lise n√£o ser√° salva. ‚úèÔ∏è")
    else:
        st.success(f"Analisando imagens para o projeto: **{st.session_state.projeto_ativo_nome}**")
    st.markdown("---")
    # --- Fim do Bloco Universal ---

    # Initialize session state variables for this page
    if 'owasp_image_uploaded_list' not in st.session_state:
        st.session_state.owasp_image_uploaded_list = []
    if 'owasp_question_text' not in st.session_state:
        st.session_state.owasp_question_text = ""
    if 'owasp_analysis_result' not in st.session_state:
        st.session_state.owasp_analysis_result = ""
    if 'owasp_consider_waf_state' not in st.session_state:
        st.session_state.owasp_consider_waf_state = False

    def reset_owasp_scout_visual():
        st.session_state.owasp_image_uploaded_list = []
        st.session_state.owasp_question_text = ""
        st.session_state.owasp_analysis_result = ""
        st.session_state.owasp_consider_waf_state = False
        logging.info("OWASP Image Analyzer: Reset de campos.")
        st.rerun()

    if st.button("Limpar e Fazer Nova Consulta", key="reset_visual_analysis_button"):
        reset_owasp_scout_visual()

    uploaded_files = st.file_uploader(
        "Selecione uma ou mais imagens para an√°lise (JPG, JPEG, PNG)",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="owasp_file_uploader"
    )

    if uploaded_files:
        existing_file_fingerprints = {(e['name'], e['image'].size) for e in st.session_state.owasp_image_uploaded_list if 'name' in e and 'image' in e}
        
        for uploaded_file in uploaded_files:
            try:
                img_bytes = uploaded_file.getvalue()
                img = Image.open(BytesIO(img_bytes))
                
                file_fingerprint = (uploaded_file.name, img.size)
                
                if file_fingerprint not in existing_file_fingerprints:
                    st.session_state.owasp_image_uploaded_list.append({
                        'image': img,
                        'name': uploaded_file.name,
                        'id': str(uuid.uuid4())
                    })
                    existing_file_fingerprints.add(file_fingerprint)
                    logging.info(f"OWASP Image Analyzer: Imagem '{uploaded_file.name}' carregada.")
                else:
                    st.info(f"Arquivo '{uploaded_file.name}' j√° carregado. Ignorando duplicata.")
            except Exception as e:
                st.error(f"Erro ao carregar a imagem {uploaded_file.name}: {e}")
                logging.error(f"OWASP Image Analyzer: Erro ao carregar imagem '{uploaded_file.name}': {e}")

    if st.session_state.owasp_image_uploaded_list:
        st.markdown("#### Imagens Carregadas:")
        images_to_remove = []
        for i, img_data in enumerate(st.session_state.owasp_image_uploaded_list):
            col1, col2 = st.columns([3, 1])
            with col1:
                st.image(img_data['image'], caption=f"Pr√©-visualiza√ß√£o Imagem {i+1}: {img_data.get('name', 'N/A')}", use_container_width=True)
            with col2:
                if st.button(f"Remover Imagem {i+1}", key=f"remove_owasp_img_btn_{img_data['id']}"):
                    images_to_remove.append(i)
        
        if images_to_remove:
            for index in sorted(images_to_remove, reverse=True):
                logging.info(f"OWASP Image Analyzer: Imagem '{st.session_state.owasp_image_uploaded_list[index].get('name', 'N/A')}' removida.")
                del st.session_state.owasp_image_uploaded_list[index]
            st.rerun()

    question = st.text_area(
        "Sua pergunta sobre a vulnerabilidade ou contexto:",
        value=st.session_state.owasp_question_text,
        placeholder="Ex: 'Esta tela de login √© vulner√°vel?', 'H√° XSS neste c√≥digo?', 'Qual vulnerabilidade est√° presente neste diagrama?'",
        key="owasp_question_input"
    )
    st.session_state.owasp_question_text = question

    consider_waf = st.checkbox(
        "Considerar bypass de WAF?",
        value=st.session_state.owasp_consider_waf_state,
        key="owasp_waf_checkbox"
    )

    if st.button("Analisar Vulnerabilidade", key="owasp_analyze_button_main"):
        if not st.session_state.owasp_image_uploaded_list:
            st.error("Por favor, selecione pelo menos uma imagem para an√°lise.")
            return
        elif not st.session_state.owasp_question_text:
            st.error("Por favor, digite sua pergunta sobre a vulnerabilidade nas imagens.")
            return
        else:
            with st.spinner("Analisando suas imagens em busca de vulnerabilidades OWASP..."):
                logging.info(f"OWASP Image Analyzer: Iniciando an√°lise para '{st.session_state.owasp_question_text}' com {len(st.session_state.owasp_image_uploaded_list)} imagens.")

                # --- In√≠cio das Melhorias de Prompt ---
                global_context_prompt = get_global_context_prompt()
                verbosity_prompt = get_verbosity_prompt()
                instrucao_chain_of_thought = (
                    "\n\n**Instru√ß√£o de Racioc√≠nio Interno:** Antes de formular sua resposta final, siga estes passos de an√°lise mentalmente: "
                    "1. Examine cada imagem individualmente e identifique os elementos t√©cnicos vis√≠veis (ex: formul√°rios, trechos de c√≥digo, URLs, nomes de par√¢metros, respostas de servidor). "
                    f"2. Com base na pergunta do usu√°rio ('{st.session_state.owasp_question_text}'), liste os vetores de ataque OWASP mais prov√°veis para os elementos identificados. "
                    "3. Para cada vetor de ataque potencial, formule uma hip√≥tese de como ele se aplicaria ao contexto visual espec√≠fico. "
                    "4. Apenas ap√≥s concluir essa an√°lise interna, construa a resposta final para o usu√°rio, seguindo estritamente o formato de sa√≠da e o n√≠vel de verbosidade solicitados."
                )
                # --- Fim das Melhorias de Prompt ---
                
                # Usando o seu prompt detalhado e injetando as novas instru√ß√µes
                llm_input_parts = [
                    f"Voc√™ √© um especialista em seguran√ßa da informa√ß√£o e pentest.",
                    f"{global_context_prompt}",
                    f"{verbosity_prompt}",
                    instrucao_chain_of_thought,
                    f"\n\n**Tarefa Principal:** Analise TODAS as imagens fornecidas e o seguinte contexto/pergunta: '{st.session_state.owasp_question_text}'.",
                    f"\n\nIdentifique poss√≠veis vulnerabilidades de seguran√ßa da informa√ß√£o relevantes para a OWASP Top 10 (2021) que possam ser inferidas das imagens ou do contexto fornecido.",
                    f"\n\n**Formato de Sa√≠da Solicitado:** Para cada vulnerabilidade identificada, forne√ßa os seguintes detalhes de forma concisa e pr√°tica, utilizando formato Markdown para t√≠tulos e blocos de c√≥digo:",
                    f"\n\n## 1. Detalhamento da Falha",
                    f"\nUma breve explica√ß√£o do que √© a vulnerabilidade, como ela ocorre e os cen√°rios comuns de impacto, **especificamente como se relaciona √†s imagens ou ao contexto.** If the vulnerability is visible in a specific image, mention which image (e.g., 'Na Imagem 1, ...').",
                    f"\n\n## 2. Categoria OWASP (2021)",
                    f"\nIndique o C√ìDIGO e o NOME da categoria da OWASP Top 10 (2021) √† qual esta vulnerabilidade pertence (ex: A03: Injection). Use a lista: {', '.join([f'{c}: {n}' for c, n in OWASP_TOP_10_2021.items()])}. Se for uma subcategoria, mencione-la tamb√©m.",
                    f"\n\n## 3. T√©cnicas de Explora√ß√£o Detalhadas",
                    f"\nDescreva passo a passo os m√©todos comuns e abordagens para testar e explorar esta vulnerabilidade, focando em como as imagens podem estar relacionadas. Seja did√°tico e pr√°tico.\n",
                    f"\n\n## 4. Ferramentas Sugeridas",
                    f"\nListe as ferramentas de seguran√ßa e pentest (ex: Burp Suite, Nmap, SQLmap, XSSer, Nessus, Nikto, Metasploit, etc.) que seriam √∫teis para descobrir e explorar esta vulnerabilidade, explicando brevemente como cada uma se aplicaria.\n",
                    f"\n\n## 5. Severidade",
                    f"\nClassifique a severidade desta vulnerabilidade: [Cr√≠tica/Alta/M√©dia/Baixa].\n",
                    f"\n\n## 6. Dicas de Explora√ß√£o / Pr√≥ximos Passos Pr√°ticos",
                    f"\nCom base na falha identificada e no contexto das imagens, forne√ßa dicas pr√°ticas e os pr√≥ximos passos que um pentester faria para explorar ou confirmar a falha. Inclua instru√ß√µes sobre como usar as ferramentas sugeridas e payloads de teste, se aplic√°vel. Seja acion√°vel.\n"
                ]

                if st.session_state.owasp_consider_waf_state:
                    llm_input_parts.append(f"\n\n## 7. Dicas de Bypass de WAF")
                    llm_input_parts.append(f"\nForne√ßa estrat√©gias, t√©cnicas e exemplos pr√°ticos (se aplic√°vel √† vulnerabilidade) para contornar ou evadir a detec√ß√£o de um Web Application Firewall (WAF) ao tentar explorar esta falha. Inclua exemplos de payloads ou modifica√ß√µes de requisi√ß√µes que podem ajudar a testar o presen√ßa ou bypass do WAF.")
                    poc_section_num = 8
                else:
                    poc_section_num = 7

                llm_input_parts.append(f"\n\n## {poc_section_num}. Prova de Conceito (PoC)")
                llm_input_parts.append(f"\nForne√ßa **exemplos pr√°ticos de comandos de terminal, requisi√ß√µes HTTP (com `curl` ou similar), ou payloads de c√≥digo (Python, JS, etc.)** que demonstrem a explora√ß√£o. Esses exemplos devem ser claros, prontos para uso (com pequenas adapta√ß√µes) e encapsulados em blocos de c√≥digo Markdown (` ``` `). Relacione o PoC √†s imagens ou contexto, se poss√≠vel.")

                llm_input_parts.append(f"\n\nSeu objetivo √© ser direto, √∫til e focado em a√ß√µes e informa√ß√µes completas para um pentester. Se as imagens n√£o contiverem vulnerabilidades √≥bvias, ou a pergunta for muito gen√©rica, indique isso de forma clara.")
                
                for img_data in st.session_state.owasp_image_uploaded_list:
                    llm_input_parts.append(img_data['image'])

                analysis_result = obter_resposta_llm(llm_model_vision, llm_input_parts)

                if analysis_result:
                    st.session_state.owasp_analysis_result = analysis_result
                    logging.info("OWASP Image Analyzer: An√°lise conclu√≠da com sucesso.")

                    # Padr√£o Universal de Salvamento
                    if not st.session_state.get('modo_rascunho', False):
                        try:
                            nomes_imagens = ", ".join([img['name'] for img in st.session_state.owasp_image_uploaded_list])
                            resumo_para_db = f"An√°lise de Imagem: '{st.session_state.owasp_question_text}' em [{nomes_imagens}]"
                            database.salvar_analise(
                                projeto_id=st.session_state.projeto_ativo_id,
                                tipo_analise="OWASP Image Analyzer",
                                resumo_input=resumo_para_db,
                                resultado_completo=analysis_result
                            )
                            st.toast("An√°lise de imagem salva com sucesso no projeto!", icon="üíæ")
                        except Exception as e:
                            st.error(f"Houve um erro ao salvar a an√°lise no banco de dados: {e}")
                    else:
                        st.toast("Modo Rascunho: Resultado n√£o salvo.", icon="‚úèÔ∏è")
                else:
                    st.session_state.owasp_analysis_result = "N√£o foi poss√≠vel obter uma resposta do Gemini. Tente novamente."
                    logging.error("OWASP Image Analyzer: Falha na obten√ß√£o da resposta do LLM.")

    if st.session_state.owasp_analysis_result:
        st.subheader("Resultados da An√°lise Visual")
        st.markdown(st.session_state.owasp_analysis_result)
        
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="owasp_visual_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback OWASP Image Analyzer: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="owasp_visual_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback OWASP Image Analyzer: Precisa de Melhoria.")

def owasp_text_analysis_page(llm_model_vision, llm_model_text):
    st.header("OWASP Vulnerability Details üìö")
    st.markdown("""
        Digite o C√ìDIGO de uma categoria OWASP Top 10 (ex: `A03`) ou o NOME de uma falha espec√≠fica (ex: `IDOR`, `XSS`, `SQL Injection`).
        O HuntIA fornecer√° detalhes completos sobre a vulnerabilidade.
    """)
    logging.info("P√°gina OWASP Vulnerability Details acessada.")

    # Bloco Universal de Verifica√ß√£o
    if not st.session_state.get('projeto_ativo_id') and not st.session_state.get('modo_rascunho'):
        st.error("Por favor, selecione um projeto ou ative o 'Modo Rascunho' na p√°gina de Configura√ß√µes.")
        st.stop()
    
    if st.session_state.get('modo_rascunho'):
        st.info("Voc√™ est√° no Modo Rascunho. Esta consulta n√£o ser√° salva. ‚úèÔ∏è")
    else:
        st.success(f"Consultando vulnerabilidades para o projeto: **{st.session_state.projeto_ativo_nome}**")
    st.markdown("---")

    # Initialize session state variables for this page
    if 'owasp_text_input_falha' not in st.session_state:
        st.session_state.owasp_text_input_falha = ""
    if 'owasp_text_analysis_result' not in st.session_state:
        st.session_state.owasp_text_analysis_result = ""
    if 'owasp_text_context_input' not in st.session_state:
        st.session_state.owasp_text_context_input = ""
    if 'owasp_text_consider_waf_state' not in st.session_state:
        st.session_state.owasp_consider_waf_state = False

    def reset_owasp_text_analysis():
        st.session_state.owasp_text_input_falha = ""
        st.session_state.owasp_text_analysis_result = ""
        st.session_state.owasp_text_context_input = ""
        st.session_state.owasp_consider_waf_state = False
        logging.info("OWASP Vulnerability Details: Reset de campos.")
        st.rerun()

    if st.button("Limpar e Fazer Nova Consulta", key="reset_text_analysis_button"):
        reset_owasp_text_analysis()

    user_input_falha = st.text_input(
        "Digite a falha ou categoria OWASP:",
        value=st.session_state.owasp_text_input_falha,
        placeholder="Ex: A01, Injection, IDOR, Cross-Site Scripting",
        key="text_input_falha"
    )
    st.session_state.owasp_text_input_falha = user_input_falha.strip()

    contexto_texto = st.text_area(
        "Contexto Adicional Livre (opcional, para refinar a falha espec√≠fica):",
        value=st.session_state.owasp_text_context_input,
        placeholder="Ex: 'aplica√ß√£o web em PHP', 'API REST com JWT', 'explora√ß√£o via SQLi no par√¢metro id'",
        height=150,
        key="text_context_input"
    )
    st.session_state.owasp_text_context_input = contexto_texto.strip()

    consider_waf_texto = st.checkbox(
        "Considerar bypass de WAF?",
        value=st.session_state.owasp_consider_waf_state,
        key="text_consider_waf_checkbox"
    )

    if st.button("Analisar Falha por Texto", key="analyze_text_button"):
        if not st.session_state.owasp_text_input_falha:
            st.error("Por favor, digite a falha ou categoria OWASP para an√°lise.")
            logging.warning("OWASP Vulnerability Details: An√°lise abortada, entrada de falha vazia.")
            return
        else:
            categoria_owasp_codigo = None
            specific_vulnerability_name = st.session_state.owasp_text_input_falha

            if specific_vulnerability_name.upper() in OWASP_TOP_10_2021:
                categoria_owasp_codigo = specific_vulnerability_name.upper()
                st.info(f"Categoria OWASP selecionada: {OWASP_TOP_10_2021[categoria_owasp_codigo]}")
            else:
                categoria_owasp_codigo = mapear_falha_para_owasp(llm_model_text, specific_vulnerability_name)
                if categoria_owasp_codigo:
                    st.info(f"O LLM mapeou '{specific_vulnerability_name}' para a categoria OWASP: {OWASP_TOP_10_2021[categoria_owasp_codigo]}")
                else:
                    st.error("N√£o foi poss√≠vel identificar a categoria OWASP para a falha fornecida.")
                    st.session_state.owasp_text_analysis_result = ""
                    return

            if categoria_owasp_codigo:
                with st.spinner(f"Obtendo informa√ß√µes para {specific_vulnerability_name}..."):
                    
                    global_context_prompt = get_global_context_prompt()
                    verbosity_prompt = get_verbosity_prompt()

                    prompt_base = (
                        f"Voc√™ √© um especialista em seguran√ßa da informa√ß√£o e pentest."
                        f"{global_context_prompt}"
                        f"\n\n{verbosity_prompt}\n\n"
                        f"Sua tarefa √© fornecer informa√ß√µes detalhadas para a vulnerabilidade **'{specific_vulnerability_name}'**,"
                        f"que se enquadra na categoria da OWASP Top 10 (2021) como **'{OWASP_TOP_10_2021[categoria_owasp_codigo]}' ({categoria_owasp_codigo})**."
                        f"Considere o seguinte contexto adicional livre: '{st.session_state.owasp_text_context_input}'."
                        f"\n\nPor favor, inclua os seguintes t√≥picos de forma **concisa, t√©cnica e pr√°tica**, utilizando formato Markdown para t√≠tulos e blocos de c√≥digo:"
                        f"\n\n## 1. Detalhamento da Falha"
                        f"\nExplique a natureza da vulnerabilidade de forma clara e concisa: o que ela √©, como surge e por que √© um problema de seguran√ßa. Foque nos conceitos essenciais e no seu mecanismo, **especificamente para '{specific_vulnerability_name}'**.\n"
                        f"\n\n## 2. Cen√°rio de Exemplo de Explora√ß√£o"
                        f"\nIlustre um cen√°rio de ataque potencial que explora essa vulnerabilidade. Descreva as etapas passo a passo que um atacante poderia seguir para explor√°-la, incluindo o ambiente t√≠pico e as condi√ß√µes necess√°rias para o sucesso do ataque, **aplicado a '{specific_vulnerability_name}'**. N√£o inclua c√≥digo aqui, apenas a l√≥gica.\n"
                        f"\n\n## 3. Severidade e Impacto T√©cnico"
                        f"\nClassifique a severidade desta vulnerabilidade: [Cr√≠tica/Alta/M√©dia/Baixa].\n"
                        f"**Impacto T√©cnico Detalhado:** Descreva as **consequ√™ncias t√©cnicas diretas e espec√≠ficas** da explora√ß√£o desta falha, indo al√©m do gen√©rico. Ex: 'A execu√ß√£o desta SQL Injection pode resultar em exfiltra√ß√£o completa do banco de dados de usu√°rios, comprometimento do servidor web subjacente (se Shell via SQLMap), e bypass de autentica√ß√£o.'\n"
                        f"**CVSSv3.1 Score:** Forne√ßa uma estimativa do score CVSS v3.1 para esta vulnerabilidade e o vetor CVSS. Ex: `7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)`\n"
                    )

                    if consider_waf_texto:
                         prompt_base += f"\n\n## 4. Dicas de Bypass de WAF"
                         prompt_base += f"\nForne√ßa estrat√©gias, t√©cnicas e exemplos pr√°ticos (se aplic√°vel √† vulnerabilidade) para contornar ou evadir a detec√ß√£o de um Web Application Firewall (WAF) ao tentar explorar esta falha. Inclua exemplos de payloads ou modifica√ß√µes de requisi√ß√µes que podem ajudar a testar o presen√ßa ou bypass do WAF."
                         solution_section_num = 5
                         benefits_risks_section_num = 6
                    else:
                         solution_section_num = 4
                         benefits_risks_section_num = 5

                    prompt_base += (
                        f"\n\n## {solution_section_num}. Detalhamento da Solu√ß√£o"
                        f"\nDescreva as **a√ß√µes de corre√ß√£o concretas, detalhadas e com exemplos t√©cnicos se poss√≠vel**. Evite generaliza√ß√µes."
                        f"**Se o 'Contexto Adicional Livre' cont√©m detalhes de explora√ß√£o ou trechos de c√≥digo, baseie suas dicas de solu√ß√£o diretamente nesse c√≥digo ou nos princ√≠pios de explora√ß√£o descritos, oferecendo corre√ß√µes coesas e precisas para aquele cen√°rio espec√≠fico.**"
                        f"Seja espec√≠fico. Ex: 'Para mitigar SQL Injection, implemente Prepared Statements ou ORM's seguros (com exemplo de c√≥digo em Python/Java), use valida√ß√£o de input rigorosa (whitelist) no backend, e aplique o princ√≠pio do menor privil√©gio ao usu√°rio do banco de dados.'\n"
                        f"\n\n## {benefits_risks_section_num}. Benef√≠cios e Riscos da Corre√ß√£o"
                        f"\nQuais s√£o os benef√≠cios de implementar a solu√ß√£o e os poss√≠veis riscos ou impactos colaterais da sua aplica√ß√£o?"
                        f"\n\nSeu objetivo √© ser direto, √∫til e focado em a√ß√µes e informa√ß√µes completas para um pentester, como um resumo para um relat√≥rio de pentest."
                    )

                    analysis_result = obter_resposta_llm(llm_model_text, [prompt_base])

                    if analysis_result:
                        st.session_state.owasp_text_analysis_result = analysis_result
                        logging.info("OWASP Vulnerability Details: An√°lise de texto conclu√≠da com sucesso.")

                        if not st.session_state.get('modo_rascunho', False):
                            try:
                                resumo_para_db = f"Consulta sobre a vulnerabilidade: '{st.session_state.owasp_text_input_falha}'"
                                database.salvar_analise(
                                    projeto_id=st.session_state.projeto_ativo_id,
                                    tipo_analise="OWASP Vulnerability Details",
                                    resumo_input=resumo_para_db,
                                    resultado_completo=analysis_result
                                )
                                st.toast("Consulta salva com sucesso no projeto!", icon="üíæ")
                            except Exception as e:
                                st.error(f"Houve um erro ao salvar a consulta no banco de dados: {e}")
                        else:
                            st.toast("Modo Rascunho: Resultado n√£o salvo.", icon="‚úèÔ∏è")
                    else:
                        st.session_state.owasp_text_analysis_result = "N√£o foi poss√≠vel obter uma resposta do Gemini. Tente novamente."

    if st.session_state.owasp_text_analysis_result:
        st.subheader("Resultados da An√°lise por Texto")
        st.markdown(st.session_state.owasp_text_analysis_result)
        
        # --- IN√çCIO DA CORRE√á√ÉO: BOT√ïES DE FEEDBACK RESTAURADOS ---
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="owasp_text_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback OWASP Vulnerability Details: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="owasp_text_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback OWASP Vulnerability Details: Precisa de Melhoria.")
        # --- FIM DA CORRE√á√ÉO ---

# C√ìDIGO DA NOVA P√ÅGINA PENTEST COPILOT

def pentest_copilot_page(llm_model_text):
    st.header("Pentest Copilot ü§ñ: Seu Assistente de Gera√ß√£o")
    st.markdown("""
        Seu centro de comando para gerar conte√∫do t√°tico. Selecione o que voc√™ precisa,
        forne√ßa o contexto, e deixe o HuntIA construir para voc√™.
    """)
    logging.info("P√°gina Pentest Copilot acessada.")

    # Bloco Universal de Verifica√ß√£o
    if not st.session_state.get('projeto_ativo_id') and not st.session_state.get('modo_rascunho'):
        st.error("Por favor, selecione um projeto ou ative o 'Modo Rascunho' na p√°gina de Configura√ß√µes.")
        st.stop()

    if st.session_state.get('modo_rascunho'):
        st.info("Voc√™ est√° no Modo Rascunho. O conte√∫do gerado n√£o ser√° salvo. ‚úèÔ∏è")
    else:
        st.success(f"Gerando conte√∫do para o projeto: **{st.session_state.projeto_ativo_nome}**")
    st.markdown("---")

    # Inicializa o estado do seletor e do resultado
    if 'copilot_action' not in st.session_state:
        st.session_state.copilot_action = "Comando T√°tico de Ferramenta"
    if 'copilot_result' not in st.session_state:
        st.session_state.copilot_result = ""


    # Seletor principal da ferramenta
    action = st.selectbox(
        "O que voc√™ quer gerar?",
        ("Comando T√°tico de Ferramenta", "Prova de Conceito (PoC) em HTML", "Playbook de Pentest"),
        key="copilot_selector"
    )
    st.session_state.copilot_action = action
    
    st.markdown("---")
    
    # L√ìGICA CONDICIONAL PARA CADA FERRAMENTA
    
    # ---------------------------------------------------------------------
    # 1. L√ìGICA DO TACTICAL COMMAND ORCHESTRATOR
    # ---------------------------------------------------------------------
    if action == "Comando T√°tico de Ferramenta":
        st.subheader("Gerador de Comando T√°tico")
        
        scenario_input = st.text_area("Descreva o cen√°rio e seu objetivo:", key="copilot_command_scenario", height=150)
        tool_options = ["Qualquer Ferramenta", "Nmap", "Metasploit", "Burp Suite (curl)", "SQLmap", "Hydra", "ffuf", "Nuclei"]
        selected_tool = st.selectbox("Ferramenta Preferida (Opcional):", options=tool_options, key="copilot_command_tool")
        os_options = ["Linux/macOS (Bash)", "Windows (PowerShell/CMD)"]
        selected_os = st.selectbox("Sistema Operacional Alvo:", options=os_options, key="copilot_command_os")

        if st.button("Gerar Comando", key="copilot_generate_command"):
            if scenario_input:
                with st.spinner("Gerando comando t√°tico..."):
                    global_context_prompt = get_global_context_prompt()
                    verbosity_prompt = get_verbosity_prompt()
                    target_tool_text = f"Usando a ferramenta '{selected_tool}'." if selected_tool != "Qualquer Ferramenta" else ""
                    
                    command_prompt = (
                        f"Voc√™ √© um especialista em pentest e automa√ß√£o."
                        f"{global_context_prompt}\n\n{verbosity_prompt}\n\n"
                        f"Sua tarefa √© gerar um comando de linha de comando preciso e otimizado para o seguinte cen√°rio:\n"
                        f"**Cen√°rio do Usu√°rio:** '{scenario_input}'.\n"
                        f"{target_tool_text}\n"
                        f"O comando deve ser para o sistema operacional '{selected_os}'."
                        f"\n\nForne√ßa as seguintes informa√ß√µes em Markdown:\n\n"
                        f"## 1. Comando Sugerido\n"
                        f"Apresente o comando COMPLETO e PRONTO PARA USO em um bloco de c√≥digo.\n\n"
                        f"## 2. Explica√ß√£o do Comando\n"
                        f"Explique cada parte do comando e seus par√¢metros.\n\n"
                        f"## 3. Observa√ß√µes de Seguran√ßa/Melhores Pr√°ticas\n"
                        f"Adicione quaisquer observa√ß√µes de seguran√ßa, riscos ou pr√≥ximos passos."
                    )
                    
                    result = obter_resposta_llm(llm_model_text, [command_prompt])
                    st.session_state.copilot_result = result
                    
                    if result and not st.session_state.get('modo_rascunho', False):
                        database.salvar_analise(st.session_state.projeto_ativo_id, "Comando T√°tico", scenario_input, result)
                        st.toast("Comando salvo no projeto!", icon="üíæ")

    # ---------------------------------------------------------------------
    # 2. L√ìGICA DO POC GENERATOR (HTML)
    # ---------------------------------------------------------------------
    elif action == "Prova de Conceito (PoC) em HTML":
        st.subheader("Gerador de PoC em HTML")

        vulnerability_input = st.text_input("Vulnerabilidade (Ex: CSRF, Clickjacking):", key="copilot_poc_vuln")
        context_input = st.text_area("Contexto Adicional (URL alvo, par√¢metros, m√©todo, etc.):", key="copilot_poc_context", height=150)

        if st.button("Gerar PoC HTML", key="copilot_generate_poc"):
            if vulnerability_input:
                with st.spinner("Gerando PoC HTML..."):
                    global_context_prompt = get_global_context_prompt()
                    verbosity_prompt = get_verbosity_prompt()
                    
                    poc_prompt = (
                        f"Voc√™ √© um especialista em pentest."
                        f"{global_context_prompt}\n\n{verbosity_prompt}\n\n"
                        f"Sua tarefa √© gerar uma PoC em HTML funcional para a vulnerabilidade '{vulnerability_input}'.\n"
                        f"**Contexto:** {context_input if context_input else 'Nenhum.'}\n\n"
                        f"Forne√ßa as informa√ß√µes nos seguintes t√≥picos:\n\n"
                        f"## 1. Detalhes da Vulnerabilidade e Como Funciona\n\n"
                        f"## 2. C√≥digo HTML da PoC (Completo e M√≠nimo)\n"
                        f"Encapsule o HTML completo em um bloco de c√≥digo ` ```html `.\n\n"
                        f"## 3. Instru√ß√µes de Uso e Payload (se aplic√°vel)\n"
                    )
                    
                    result = obter_resposta_llm(llm_model_text, [poc_prompt])
                    st.session_state.copilot_result = result
                    
                    if result and not st.session_state.get('modo_rascunho', False):
                        database.salvar_analise(st.session_state.projeto_ativo_id, "PoC HTML", vulnerability_input, result)
                        st.toast("PoC salva no projeto!", icon="üíæ")

    # ---------------------------------------------------------------------
    # 3. L√ìGICA DO PENTEST PLAYBOOK GENERATOR
    # ---------------------------------------------------------------------
    elif action == "Playbook de Pentest":
        st.subheader("Gerador de Playbook de Pentest")
        
        scope_input = st.text_area("Escopo do Pentest:", key="copilot_playbook_scope", height=100)
        objectives_input = st.text_area("Objetivos do Pentest:", key="copilot_playbook_objectives", height=100)

        if st.button("Gerar Playbook", key="copilot_generate_playbook"):
            if scope_input and objectives_input:
                with st.spinner("Gerando playbook..."):
                    global_context_prompt = get_global_context_prompt()
                    verbosity_prompt = get_verbosity_prompt()
                    
                    playbook_prompt = (
                         f"Voc√™ √© um especialista em testes de intrus√£o."
                         f"{global_context_prompt}\n\n{verbosity_prompt}\n\n"
                         f"Sua tarefa √© gerar um playbook detalhado para um pentest com o seguinte escopo e objetivos:\n"
                         f"**Escopo:** {scope_input}\n"
                         f"**Objetivos:** {objectives_input}\n\n"
                         f"O playbook deve cobrir as fases de Reconhecimento, Mapeamento, An√°lise de Vulnerabilidades, Explora√ß√£o, e Gera√ß√£o de Relat√≥rio. Para cada fase, inclua Passos Chave, Ferramentas Sugeridas com comandos de exemplo, e Resultados Esperados."
                    )
                    
                    result = obter_resposta_llm(llm_model_text, [playbook_prompt])
                    st.session_state.copilot_result = result
                    
                    if result and not st.session_state.get('modo_rascunho', False):
                        database.salvar_analise(st.session_state.projeto_ativo_id, "Playbook de Pentest", scope_input, result)
                        st.toast("Playbook salvo no projeto!", icon="üíæ")

    # Exibe o resultado da a√ß√£o do Copilot
    if 'copilot_result' in st.session_state and st.session_state.copilot_result:
        st.markdown("---")
        st.subheader("Resultado Gerado pelo Copilot")
        
        # L√≥gica para formatar a sa√≠da
        if st.session_state.copilot_action == "Prova de Conceito (PoC) em HTML":
             # Extrai o c√≥digo HTML da resposta para renderiza√ß√£o
             html_match = re.search(r"```html\n(.*?)```", st.session_state.copilot_result, re.DOTALL)
             if html_match:
                 html_code = html_match.group(1)
                 st.markdown("#### Visualiza√ß√£o da PoC")
                 components.html(html_code, height=300, scrolling=True)
             st.markdown("#### Resposta Completa")
             st.markdown(st.session_state.copilot_result)
        else:
             st.markdown(st.session_state.copilot_result)

def http_request_analysis_page(llm_model_vision, llm_model_text):
    st.header("Deep HTTP Insight üì°")
    st.markdown("""
    Selecione o tipo de conte√∫do para an√°lise. Voc√™ pode colar:
    - **Requisi√ß√£o HTTP RAW:** Analisa requisi√ß√µes HTTP completas em busca de falhas OWASP.
    - **Headers de Resposta HTTP:** Analisa cabe√ßalhos de resposta para misconfigurations e exposi√ß√£o de informa√ß√µes.
    - **Configura√ß√£o de Servidor:** Analisa trechos de configura√ß√£o de servidores (Apache, Nginx, IIS) para hardening.
    """)

    # Inicializar vari√°veis de sess√£o
    if 'http_analysis_type' not in st.session_state:
        st.session_state.http_analysis_type = "Requisi√ß√£o HTTP RAW"
    if 'http_request_input_url' not in st.session_state:
        st.session_state.http_request_input_url = ""
    if 'http_analysis_content' not in st.session_state:
        st.session_state.http_analysis_content = ""
    if 'http_analysis_result' not in st.session_state:
        st.session_state.http_analysis_result = ""
    if 'http_analysis_summary' not in st.session_state:
        st.session_state.http_analysis_summary = None
    if 'http_context_free_input' not in st.session_state:
        st.session_state.http_context_free_input = ""

    logging.info("P√°gina Deep HTTP Insight acessada.")

    # Resetar campos se necess√°rio
    def reset_http_analysis():
        st.session_state.http_analysis_type = "Requisi√ß√£o HTTP RAW"
        st.session_state.http_request_input_url = ""
        st.session_state.http_analysis_content = ""
        st.session_state.http_analysis_result = ""
        st.session_state.http_analysis_summary = None
        st.session_state.http_context_free_input = ""
        logging.info("Deep HTTP Insight: Reset de campos.")
        st.rerun()

    # Bot√£o para limpar e fazer nova consulta
    if st.button("Limpar e Fazer Nova Consulta", key="reset_http_analysis_button"):
        reset_http_analysis()

    # Selecionar tipo de an√°lise
    analysis_type_options = [
        "Requisi√ß√£o HTTP RAW",
        "Headers de Resposta HTTP",
        "Configura√ß√£o de Servidor (Apache/Nginx/IIS)"
    ]
    st.session_state.http_analysis_type = st.radio(
        "Tipo de An√°lise:",
        options=analysis_type_options,
        key="http_analysis_type_radio"
    )

    # URL alvo (apenas para Requisi√ß√£o HTTP RAW)
    if st.session_state.http_analysis_type == "Requisi√ß√£o HTTP RAW":
        st.session_state.http_request_input_url = st.text_input(
            "URL Alvo (Target):",
            value=st.session_state.http_request_input_url,
            placeholder="Exemplo: https://example.com/path "
        )
        if not st.session_state.http_request_input_url:
            st.error("Por favor, forne√ßa a URL Alvo para a Requisi√ß√£o HTTP RAW.")
            logging.warning("Deep HTTP Insight: An√°lise de Requisi√ß√µes HTTP abortada, URL Alvo vazia.")
            return

    # Conte√∫do para an√°lise
    content_placeholder = (
        "- Para **Requisi√ß√£o HTTP RAW**: Cole aqui a requisi√ß√£o completa.\n"
        "- Para **Headers de Resposta HTTP**: Cole apenas os headers.\n"
        "- Para **Configura√ß√£o de Servidor**: Cole o trecho de configura√ß√£o."
    )
    st.session_state.http_analysis_content = st.text_area(
        f"Cole o conte√∫do para an√°lise aqui ({st.session_state.http_analysis_type}):",
        value=st.session_state.http_analysis_content,
        placeholder=content_placeholder,
        height=300,
        key="http_config_input_area"
    )
    if not st.session_state.http_analysis_content.strip():
        st.error("Por favor, cole o conte√∫do para an√°lise.")
        logging.warning("Deep HTTP Insight: An√°lise abortada, conte√∫do vazio.")
        return

    # Contexto adicional livre
    st.session_state.http_context_free_input = st.text_area(
        "Contexto Adicional Livre (opcional, para detalhes de explora√ß√£o ou trechos de c√≥digo):",
        value=st.session_state.http_context_free_input,
        placeholder=(
            "Ex: 'A explora√ß√£o foi feita injetando `'; OR 1=1--` no par√¢metro `id` da URL.', "
            "'Trecho de c√≥digo: `user_id = request.args.get('id')`'"
        ),
        height=100,
        key="http_context_free_input_area"
    )

    # Bot√£o para analisar
    if st.button("Analisar Conte√∫do", key="analyze_http_content_button"):
        with st.spinner(f"Analisando {st.session_state.http_analysis_type} com LLM..."):
            # Preparar o prompt baseado no tipo de an√°lise
            global_context_prompt = get_global_context_prompt()
            escaped_http_context_free_input = st.session_state.http_context_free_input.replace('{', '{{').replace('}', '}}')

            if st.session_state.http_analysis_type == "Requisi√ß√£o HTTP RAW":
                prompt_intro_context = (
                    "Voc√™ √© um especialista em seguran√ßa da informa√ß√£o e pentest." +
                    global_context_prompt +
                    f"Analise a requisi√ß√£o HTTP RAW fornecida e a URL alvo '{st.session_state.http_request_input_url}'. Identifique **TODAS as poss√≠veis falhas de seguran√ßa OWASP Top 10 (2021) e outras vulnerabilidades relevantes aplic√°veis**, sendo extremamente detalhado e preciso na an√°lise de cada parte da requisi√ß√£o. "
                )
                code_lang = "http"

                # Parsear a requisi√ß√£o HTTP RAW
                parsed_req = parse_raw_http_request(st.session_state.http_analysis_content)
                prompt_content_for_llm = (
                    f"URL Alvo: {st.session_state.http_request_input_url}\n"
                    f"M√©todo: {parsed_req['method']}\n"
                    f"Caminho: {parsed_req['path']}\n"
                    f"Headers:\n{json.dumps(parsed_req['headers'], indent=2).replace('{', '{{').replace('}', '}}')}\n"
                    f"Corpo:\n{parsed_req['body'].replace('{', '{{').replace('}', '}}')}\n"
                    f"Requisi√ß√£o RAW Original:\n{st.session_state.http_analysis_content.replace('{', '{{').replace('}', '}}')}"
                )

            elif st.session_state.http_analysis_type == "Headers de Resposta HTTP":
                prompt_intro_context = (
                    "Voc√™ √© um especialista em seguran√ßa web e an√°lise de headers HTTP." +
                    global_context_prompt +
                    "Analise os seguintes headers de resposta HTTP. Identifique misconfigurations de seguran√ßa, exposi√ß√£o de informa√ß√µes sens√≠veis e a falta de headers de seguran√ßa importantes. Priorize a descri√ß√£o do achado e o exemplo de impacto."
                )
                code_lang = "http"
                prompt_content_for_llm = st.session_state.http_analysis_content.replace('{', '{{').replace('}', '}}')

            elif st.session_state.http_analysis_type == "Configura√ß√£o de Servidor (Apache/Nginx/IIS)":
                prompt_intro_context = (
                    "Voc√™ √© um especialista em hardening de servidores web (Apache, Nginx, IIS) e pentest." +
                    global_context_prompt +
                    "\n\nAnalise o seguinte trecho de configura√ß√£o de servidor. Identifique misconfigurations de seguran√ßa (OWASP A05), diret√≥rios expostos, e outras vulnerabilidades. Priorize a descri√ß√£o do achado e o exemplo de impacto."
                )
                code_lang = "plaintext"
                prompt_content_for_llm = st.session_state.http_analysis_content.replace('{', '{{').replace('}', '}}')

            # Montar o prompt completo
            full_prompt = (
                prompt_intro_context +
                f"\n\n**RESUMO:** Forne√ßa um resumo quantitativo na PRIMEIRA LINHA da sua resposta, no formato exato: `Total de Achados: X | Cr√≠ticos: Y | Altos: Z | M√©dios: W | Baixos: V` (substitua X,Y,Z,W,V pelos n√∫meros correspondentes). Se n√£o houver achados, use 0.\n\n"
                f"**Conte√∫do para an√°lise:**\n"
                f"```{code_lang}\n{prompt_content_for_llm}\n```\n\n"
                f"Para cada **achado de seguran√ßa (vulnerabilidade ou misconfiguration)** identificado, apresente os seguintes t√≥picos de forma separada e concisa, utilizando Markdown. **Comece cada achado com um cabe√ßalho `###`:**\n\n"
                f"### [Tipo de Achado] (Ex: Header de Seguran√ßa Ausente, Vers√£o do Servidor Exposta)\n"
                f"**Categoria OWASP (se aplic√°vel):** [Ex: A05: Security Misconfiguration]. Se n√£o OWASP, indique 'Exposi√ß√£o de Informa√ß√£o' ou 'Melhoria de Hardening'.\n"
                f"**Severidade/Risco:** [Cr√≠tica/Alta/M√©dia/Baixa/Informativo - explique o impacto deste achado espec√≠fico]\n"
                f"**Detalhes no Conte√∫do:** Explique onde no conte√∫do fornecido a falha foi observada. Cite o trecho relevante da requisi√ß√£o/configura√ß√£o. Seja preciso na correla√ß√£o.\n"
                f"**Exemplo de Explora√ß√£o:** Descreva o risco e como um atacante poderia se beneficiar desta configura√ß√£o/vulnerabilidade. Forne√ßa um comando simples, um payload ou uma explica√ß√£o de como testar/explorar. **Se o 'Contexto Adicional Livre' (fornecido pelo usu√°rio) cont√©m detalhes de um PoC ou trechos de c√≥digo de explora√ß√£o, baseie seu exemplo diretamente nele, incluindo o c√≥digo/comando relevante em um bloco de c√≥digo Markdown (` ```{code_lang} ` ou ` ```bash ` ou ` ```http `).** Se o contexto livre for irrelevante ou n√£o tiver PoC, forne√ßa um exemplo gen√©rico e aplic√°vel. N√£o se preocupe com \"Recomenda√ß√£o/Mitiga√ß√£o\" ou \"Ferramentas Sugeridas\" separadamente.\n"
                f"--- (Fim do Achado) ---"  # Separador para o pr√≥ximo achado
            )

            # Obter resposta do LLM
            analysis_result = obter_resposta_llm(llm_model_text, [full_prompt])
            if analysis_result:
                st.session_state.http_analysis_result = analysis_result
                logging.info("Deep HTTP Insight: An√°lise conclu√≠da com sucesso.")
            else:
                st.session_state.http_analysis_result = "N√£o foi poss√≠vel obter uma resposta do LLM. Tente novamente."
                logging.error("Deep HTTP Insight: Falha na obten√ß√£o da resposta do LLM.")

            # Parsear o resumo
            if st.session_state.http_analysis_result:
                summary_match = re.search(
                    r'Total de Achados:\s*(\d+)\s*\|\s*Cr√≠ticos:\s*(\d+)\s*\|\s*Altos:\s*(\d+)\s*\|\s*M√©dios:\s*(\d+)\s*\|\s*Baixos:\s*(\d+)',
                    st.session_state.http_analysis_result
                )
                if summary_match:
                    total, criticos, altos, medios, baixos = map(int, summary_match.groups())
                    st.session_state.http_analysis_summary = {
                        "Total": total,
                        "Cr√≠ticas": criticos,
                        "Altas": altos,
                        "M√©dios": medios,
                        "Baixos": baixos
                    }
                else:
                    st.session_state.http_analysis_summary = {"Total": 0, "Cr√≠ticas": 0, "Altas": 0, "M√©dios": 0, "Baixos": 0}
                    logging.warning("Deep HTTP Insight: Resumo de vulnerabilidades n√£o encontrado na resposta do LLM.")

    # Exibir resultados
    if st.session_state.http_analysis_result:
        st.subheader("Resultados da An√°lise de Seguran√ßa")

        # Exibir m√©tricas
        if st.session_state.http_analysis_summary:
            cols = st.columns(5)
            cols[0].metric("Total", st.session_state.http_analysis_summary.get("Total", 0))
            cols[1].metric("Cr√≠ticos", st.session_state.http_analysis_summary.get("Cr√≠ticas", 0))
            cols[2].metric("Altos", st.session_state.http_analysis_summary.get("Altas", 0))
            cols[3].metric("M√©dios", st.session_state.http_analysis_summary.get("M√©dios", 0))
            cols[4].metric("Baixos", st.session_state.http_analysis_summary.get("Baixos", 0))

        # Exibir detalhes das vulnerabilidades
        st.markdown(st.session_state.http_analysis_result)

        # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="http_analysis_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback Deep HTTP Insight: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="http_analysis_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback Deep HTTP Insight: Precisa de Melhoria.")

    logging.info("P√°gina Deep HTTP Insight finalizada.")

def pentest_lab_page(llm_model_vision, llm_model_text):
    st.header("Pentest Lab: Seu Laborat√≥rio de Vulnerabilidades üß™")
    st.markdown("""
        Selecione uma vulnerabilidade e o HuntIA ir√° gerar um mini-laborat√≥rio HTML b√°sico (PoC em HTML) para que voc√™ possa testar a falha diretamente no seu navegador.
        Tambi√©n fornecer√° dicas de como explorar e o payload/comando para o teste.
        **AVISO: Este laborat√≥rio √© para fins educacionais e de teste. N√£o execute payloads em sites reais.**
    """)
    logging.info("P√°gina Pentest Lab acessada.")

    # Initialize session state variables for this page
    if 'lab_vulnerability_selected' not in st.session_state:
        st.session_state.lab_vulnerability_selected = None
    if 'lab_html_poc' not in st.session_state:
        st.session_state.lab_html_poc = ""
    if 'lab_explanation' not in st.session_state:
        st.session_state.lab_explanation = ""
    if 'lab_payload_example' not in st.session_state:
        st.session_state.lab_payload_example = ""

    def reset_pentest_lab():
        st.session_state.lab_vulnerability_selected = None
        st.session_state.lab_html_poc = ""
        st.session_state.lab_explanation = ""
        st.session_state.lab_payload_example = ""
        logging.info("Pentest Lab: Reset de campos.")
        st.rerun()

    if st.button("Limpar Laborat√≥rio", key="reset_lab_button"):
        reset_pentest_lab()

    vulnerability_options = ["Escolha uma vulnerabilidade"] + sorted(OWASP_SUBCATEGORIES["A03"])

    selected_vuln = st.selectbox(
        "Selecione a vulnerabilidade para o laborat√≥rio:",
        options=vulnerability_options,
        index=0,
        key="lab_vuln_select"
    )
    st.session_state.lab_vulnerability_selected = selected_vuln if selected_vuln != "Escolha uma vulnerabilidade" else None

    if st.button("Gerar Laborat√≥rio", key="generate_lab_button"):
        if not st.session_state.lab_vulnerability_selected:
            st.error("Por favor, selecione uma vulnerabilidade para gerar o laborat√≥rio.")
            logging.warning("Pentest Lab: Gera√ß√£o abortada, nenhuma vulnerabilidade selecionada.")
            return
        else:
            with st.spinner(f"Gerando laborat√≥rio para {st.session_state.lab_vulnerability_selected}..."):
                logging.info(f"Pentest Lab: Gerando laborat√≥rio para {st.session_state.lab_vulnerability_selected}.")

                # Contexto global √© injetado aqui
                global_context_prompt = get_global_context_prompt()

                lab_prompt = (
                    f"Voc√™ √© um especialista em pentest e educador."
                    f"{global_context_prompt}" # INJETANDO CONTEXTO GLOBAL
                    f"\n\nSua tarefa √© criar um mini-laborat√≥rio HTML simples e um payload para demonstrar a vulnerabilidade '{st.session_state.lab_vulnerability_selected}'.\n"
                    f"\nForne√ßa as informa√ß√µes nos seguintes t√≥picos:\n\n"
                    f"## 1. Descri√ß√£o da Vulnerabilidade e Dicas de Explora√ß√£o\n"
                    f"Uma breve explica√ß√£o do que √© a vulnerabilidade, como ela funciona e dicas pr√°ticas de como tentar explor√°-la.\n\n"
                    f"## 2. Mini-Laborat√≥rio HTML (PoC HTML)\n"
                    f"Forne√ßa um **c√≥digo HTML COMPLETO e M√çNIMO** (com tags `<html>`, `<head>`, `<body>`) que simule um cen√°rio vulner√°vel a **{st.session_state.lab_vulnerability_selected}**.\n"
                    f"Este HTML deve ser funcional e auto-contido. O foco √© na vulnerabilidade, n√£o no design.\n"
                    f"Encapsule o HTML completo em um bloco de c√≥digo Markdown com a linguagem `html` (` ```html `).\n\n"
                    f"## 3. Exemplo de Payload/Comando para Teste\n"
                    f"Forne√ßa o payload ou comando espec√≠fico que o usu√°rio injetaria ou usaria neste HTML para provar a vulnerabilidade. Encapsule em um bloco de c√≥digo Markdown com la linguagem apropriada (ex: ` ```js `, ` ```sql `, ` ```bash `).\n"
                    f"Este payload deve ser adaptado para o HTML gerado no PoC HTML.\n"
                    f"\nSeja did√°tico e direto. O objetivo √© que o usu√°rio possa copiar e colar o HTML e o payload para testar."
                )

                lab_generation_raw = obter_resposta_llm(llm_model_text, [lab_prompt])

                if lab_generation_raw:
                    st.session_state.lab_explanation = lab_generation_raw

                    html_start = lab_generation_raw.find("```html")
                    html_end = lab_generation_raw.find("```", html_start + len("```html"))

                    payload_start_marker = "```"

                    if html_start != -1 and html_end != -1:
                        payload_start = lab_generation_raw.find(payload_start_marker, html_end + 1)
                    else:
                        payload_start = lab_generation_raw.find(payload_start_marker)

                    payload_end = -1
                    if payload_start != -1:
                        payload_end = lab_generation_raw.find(payload_start_marker, payload_start + len(payload_start_marker))
                        if payload_end == payload_start:
                            payload_end = -1

                    if html_start != -1 and html_end != -1:
                        st.session_state.lab_html_poc = lab_generation_raw[html_start + len("```html") : html_end].strip()
                    else:
                        st.session_state.lab_html_poc = "N√£o foi poss√≠vel extrair o HTML do laborat√≥rio. Verifique a resposta do LLM."
                        logging.warning("Pentest Lab: HTML n√£o extra√≠do da resposta do LLM.")

                    if payload_start != -1 and payload_end != -1:
                        payload_content = lab_generation_raw[payload_start + len(payload_start_marker) : payload_end].strip()
                        if '\n' in payload_content and payload_content.splitlines()[0].strip().isalpha():
                            st.session_state.lab_payload_example = '\n'.join(payload_content.splitlines()[1:])
                        else:
                            st.session_state.lab_payload_example = payload_content
                        logging.info("Pentest Lab: Laborat√≥rio gerado com sucesso.")
                    else:
                        st.session_state.lab_payload_example = "N√£o foi poss√≠vel extrair o exemplo de payload. Verifique a resposta do LLM."
                        logging.warning("Pentest Lab: Payload n√£o extra√≠do da resposta do LLM.")
                else:
                    st.session_state.lab_explanation = "N√£o foi poss√≠vel gerar o laborat√≥rio para a vulnerabilidade selecionada."
                    st.session_state.lab_html_poc = ""
                    st.session_state.lab_payload_example = ""
                    logging.error("Pentest Lab: Falha na gera√ß√£o do laborat√≥rio pelo LLM.")

    if st.session_state.lab_html_poc or st.session_state.lab_explanation:
        st.subheader("Resultados do Laborat√≥rio")

        st.markdown(st.session_state.lab_explanation)

        if st.session_state.lab_html_poc:
            st.markdown("#### Mini-Laborat√≥rio HTML (Copie e Cole em um arquivo .html e abra no navegador)")
            st.code(st.session_state.lab_html_poc, language="html")

            st.markdown("---")
            st.markdown("#### Teste o Laborat√≥rio Aqui (Visualiza√ß√£o Direta)")
            st.warning("AVISO: Esta visualiza√ß√£o direta √© para conveni√™ncia. Para um teste real e isolado, **salve o HTML em um arquivo .html e abra-o diretamente no seu navegador**.")
            components.html(st.session_state.lab_html_poc, height=300, scrolling=True)
            st.markdown("---")

        if st.session_state.lab_payload_example: # Usando lab_payload_example pois √© o que est√° em session_state para esta p√°gina
            st.markdown("#### Exemplo de Payload/Comando para Teste")
            payload_lang = "plaintext"
            first_line = st.session_state.lab_payload_example.splitlines()[0].strip() if st.session_state.lab_payload_example else ""

            if "alert(" in st.session_state.lab_payload_example.lower() or "document.write" in st.session_state.lab_payload_example.lower():
                payload_lang = "js"
            elif "SELECT " in st.session_state.lab_payload_example.upper() and "FROM " in st.session_state.lab_payload_example.upper():
                payload_lang = "sql"
            elif "http" in first_line.lower() and ("post" in first_line.lower() or "get" in first_line.lower()):
                payload_lang = "http"
            elif "curl " in first_line.lower() or "bash" in first_line.lower():
                payload_lang = "bash"
            elif "python" in first_line.lower() or "import" in st.session_state.lab_payload_example.lower():
                payload_lang = "python"

            st.code(st.session_state.lab_payload_example, language=payload_lang)
        
        # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="pentest_lab_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback Pentest Lab: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="pentest_lab_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback Pentest Lab: Precisa de Melhoria.")

# Substitua sua fun√ß√£o static_code_analyzer_page por esta vers√£o melhorada

def static_code_analyzer_page(llm_model_text):
    st.header("üë®‚Äçüíª Static Code & Secret Analyzer (com TruffleHog)")
    st.markdown("""
    Cole um trecho de c√≥digo para an√°lise. A ferramenta usar√° o **TruffleHog** para uma varredura precisa de segredos
    e, em seguida, a IA pode ser usada para analisar os riscos e as mitiga√ß√µes.
    """)
    logging.info("P√°gina Static Code Analyzer com TruffleHog acessada.")

    if 'code_input_content' not in st.session_state:
        st.session_state.code_input_content = ""
    if 'trufflehog_results' not in st.session_state:
        st.session_state.trufflehog_results = []
    if 'llm_secret_analysis' not in st.session_state:
        st.session_state.llm_secret_analysis = ""

    code_content = st.text_area(
        "Cole o conte√∫do para an√°lise aqui:",
        placeholder="const-apiKey = 'sk_live_xxxxxxxx...';\n\nfetch('/api/data');",
        height=300,
        key="secret_code_input"
    )

    if st.button("üîé Analisar Segredos com TruffleHog"):
        st.session_state.trufflehog_results = []
        st.session_state.llm_secret_analysis = ""

        if code_content.strip():
            with st.spinner("Executando TruffleHog..."):
                # Cria um arquivo tempor√°rio para o TruffleHog analisar
                with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.tmp') as tmp_file:
                    tmp_file.write(code_content)
                    tmp_file_path = tmp_file.name

                try:
                    # Executa o TruffleHog como um subprocesso, capturando a sa√≠da JSON
                    command = ["trufflehog", "filesystem", tmp_file_path, "--json"]
                    result = subprocess.run(command, capture_output=True, text=True, check=True)

                    # Processa cada linha da sa√≠da JSON
                    findings = []
                    for line in result.stdout.strip().split('\n'):
                        if line:
                            findings.append(json.loads(line))

                    st.session_state.trufflehog_results = findings
                    logging.info(f"TruffleHog encontrou {len(findings)} segredos.")

                except subprocess.CalledProcessError as e:
                    # Se o TruffleHog n√£o encontrar nada, ele pode sair com um c√≥digo de erro.
                    # Verificamos se h√° sa√≠da para ter certeza de que n√£o √© um erro real.
                    if e.stdout:
                         findings = []
                         for line in e.stdout.strip().split('\n'):
                             if line:
                                 findings.append(json.loads(line))
                         st.session_state.trufflehog_results = findings
                         logging.info(f"TruffleHog encontrou {len(findings)} segredos (com exit code).")
                    else:
                        st.error(f"Erro ao executar o TruffleHog: {e.stderr}")
                        logging.error(f"TruffleHog stderr: {e.stderr}")

                except FileNotFoundError:
                    st.error("Comando 'trufflehog' n√£o encontrado. Voc√™ o instalou no seu ambiente? (Execute: pip install trufflehog)")
                except Exception as e:
                    st.error(f"Ocorreu um erro inesperado: {e}")
                finally:
                    # Limpa o arquivo tempor√°rio
                    os.remove(tmp_file_path)
        else:
            st.warning("Por favor, insira um conte√∫do para analisar.")

    if st.session_state.trufflehog_results:
        st.subheader("Resultados da An√°lise do TruffleHog")
        total_findings = len(st.session_state.trufflehog_results)
        st.success(f"‚úÖ An√°lise conclu√≠da! Foram encontrados {total_findings} segredos potenciais.")

        for i, finding in enumerate(st.session_state.trufflehog_results):
            with st.expander(f"Segredo #{i+1}: {finding.get('DetectorName', 'N/A')}"):
                st.code(finding.get('Raw', ''), language='text')
                st.write(f"**Linha:** {finding.get('LineNum', 'N/A')}")
                st.write(f"**Verificado:** {'Sim' if finding.get('Verified') else 'N√£o'}")

        # Bot√£o para an√°lise com IA
        if st.button("ü§ñ Analisar Riscos e Corre√ß√µes com IA"):
            with st.spinner("A IA est√° analisando os segredos encontrados..."):
                findings_json = json.dumps(st.session_state.trufflehog_results, indent=2)

                analysis_prompt = f"""
                Voc√™ √© um especialista em seguran√ßa de aplica√ß√µes (AppSec).
                A ferramenta TruffleHog encontrou os seguintes segredos expostos em um trecho de c√≥digo.

                **Resultados do TruffleHog (JSON):**
                ```json
                {findings_json}
                ```

                Sua tarefa √© criar um relat√≥rio conciso sobre estes achados. Para cada segredo encontrado, forne√ßa:
                1.  **An√°lise do Risco:** Qual o impacto real se este segredo for explorado? (Ex: Acesso n√£o autorizado, movimenta√ß√£o lateral, custos financeiros).
                2.  **Plano de Remedia√ß√£o:** Quais s√£o os passos exatos para corrigir esta falha? (Ex: 1. Invalidar o segredo exposto. 2. Remover do c√≥digo-fonte e do hist√≥rico do Git. 3. Mover para uma vari√°vel de ambiente ou um cofre de segredos como HashiCorp Vault ou AWS Secrets Manager).

                Formate a sa√≠da de forma clara usando Markdown.
                """
                st.session_state.llm_secret_analysis = obter_resposta_llm(llm_model_text, [analysis_prompt])

    elif st.session_state.get('trufflehog_results') == []:
         st.info("Nenhum segredo foi encontrado pelo TruffleHog no conte√∫do fornecido.")


    if st.session_state.llm_secret_analysis:
        st.subheader("An√°lise de Risco e Remedia√ß√£o (IA)")
        st.markdown(st.session_state.llm_secret_analysis)

          # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="code_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback OpenAPI Analyzer: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="swagger_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback OpenAPI Analyzer: Precisa de Melhoria.")

def static_code_analyzer_page(llm_model_text):
    st.header("üë®‚Äçüíª Static Code & Secret Analyzer (com TruffleHog v3)")
    st.markdown("""
    Cole um trecho de c√≥digo para an√°lise. A ferramenta usar√° o **TruffleHog v3** para uma varredura precisa de segredos
    e, em seguida, a IA pode ser usada para analisar os riscos e as mitiga√ß√µes.
    """)
    logging.info("P√°gina Static Code Analyzer com TruffleHog acessada.")

    # --- IN√çCIO DA CORRE√á√ÉO ---

    # Fun√ß√£o para limpar o estado da p√°gina
    def reset_secret_analyzer():
        st.session_state.code_input_content = ""
        st.session_state.trufflehog_results = []
        st.session_state.llm_secret_analysis = ""
        logging.info("Static Code Analyzer: Campos e resultados limpos.")

    # Bot√£o para limpar e fazer nova consulta
    if st.button("Limpar e Nova An√°lise", key="clear_secrets_button"):
        reset_secret_analyzer()
        st.rerun() # Recarrega a p√°gina para refletir a limpeza

    # --- FIM DA CORRE√á√ÉO ---

    if 'code_input_content' not in st.session_state:
        st.session_state.code_input_content = ""
    if 'trufflehog_results' not in st.session_state:
        st.session_state.trufflehog_results = []
    if 'llm_secret_analysis' not in st.session_state:
        st.session_state.llm_secret_analysis = ""

    # Usamos a chave 'secret_code_input' para o st.text_area para que ele seja atualizado pelo reset
    code_content = st.text_area(
        "Cole o conte√∫do para an√°lise aqui:",
        value=st.session_state.get('code_input_content', ''), # Usamos .get() para seguran√ßa
        placeholder="const apiKey = 'sk_live_xxxxxxxx...';\n\nfetch('/api/data');",
        height=300,
        key="secret_code_text_area"
    )
    st.session_state.code_input_content = code_content


    if st.button("üîé Analisar Segredos com TruffleHog"):
        st.session_state.trufflehog_results = []
        st.session_state.llm_secret_analysis = ""

        if code_content.strip():
            with st.spinner("Executando TruffleHog v3..."):
                with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.tmp') as tmp_file:
                    tmp_file.write(code_content)
                    tmp_file_path = tmp_file.name

                try:
                    python_executable_path = sys.executable
                    trufflehog_executable_path = os.path.join(os.path.dirname(python_executable_path), 'trufflehog')

                    # Verificamos se o execut√°vel existe no venv antes de tentar o PATH global
                    if not os.path.exists(trufflehog_executable_path):
                        trufflehog_executable_path = "trufflehog" # Recorre ao PATH global (instalado via Brew)

                    command = [trufflehog_executable_path, "filesystem", tmp_file_path, "--json"]
                    
                    result = subprocess.run(command, capture_output=True, text=True)
                    
                    findings = []
                    if result.stdout:
                        for line in result.stdout.strip().split('\n'):
                            if line:
                                findings.append(json.loads(line))
                    
                    st.session_state.trufflehog_results = findings
                    logging.info(f"TruffleHog encontrou {len(findings)} segredos.")

                except FileNotFoundError:
                    st.error("Comando 'trufflehog' n√£o encontrado. Voc√™ o instalou com o Homebrew ou no seu venv? (Execute: brew install trufflehog)")
                except Exception as e:
                    st.error(f"Ocorreu um erro inesperado: {e}")
                finally:
                    os.remove(tmp_file_path)
        else:
            st.warning("Por favor, insira um conte√∫do para analisar.")

    # Exibi√ß√£o dos resultados (l√≥gica inalterada)
    if st.session_state.trufflehog_results:
        st.subheader("Resultados da An√°lise do TruffleHog")
        total_findings = len(st.session_state.trufflehog_results)
        st.success(f"‚úÖ An√°lise conclu√≠da! Foram encontrados {total_findings} segredos potenciais.")

        for i, finding in enumerate(st.session_state.trufflehog_results):
            with st.expander(f"Segredo #{i+1}: {finding.get('Detector', {}).get('Name', 'N/A')}"):
                st.code(finding.get('Raw', ''), language='text')
                st.write(f"**Verificado:** {'Sim' if finding.get('Verified') else 'N√£o'}")

        if st.button("ü§ñ Analisar Riscos e Corre√ß√µes com IA"):
            with st.spinner("A IA est√° analisando os segredos encontrados..."):
                findings_json = json.dumps(st.session_state.trufflehog_results, indent=2)
                analysis_prompt = f"""
                Voc√™ √© um especialista em seguran√ßa de aplica√ß√µes (AppSec).
                A ferramenta TruffleHog encontrou os seguintes segredos expostos. Analise o risco de cada um e forne√ßa um plano de remedia√ß√£o detalhado.
                **Resultados (JSON):**
                ```json
                {findings_json}
                ```
                """
                st.session_state.llm_secret_analysis = obter_resposta_llm(llm_model_text, [analysis_prompt])

    elif st.session_state.get('trufflehog_results') == []:
         st.info("Nenhum segredo foi encontrado pelo TruffleHog no conte√∫do fornecido.")

    if st.session_state.llm_secret_analysis:
        st.subheader("An√°lise de Risco e Remedia√ß√£o (IA)")
        st.markdown(st.session_state.llm_secret_analysis)

        # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="swagger_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback OpenAPI Analyzer: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="swagger_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback OpenAPI Analyzer: Precisa de Melhoria.")


def tactical_command_orchestrator_page(llm_model_text):
    st.header("Tactical Command Orchestrator ü§ñ")
    st.markdown("""
        Descreva o seu cen√°rio de pentest, o alvo, e qual ferramenta ou tipo de a√ß√£o voc√™ precisa.
        O HuntIA ir√° sugerir os comandos mais eficazes e otimizados, adaptados ao seu ambiente e objetivo.
    """)
    logging.info("P√°gina Tactical Command Orchestrator acessada.")

    if 'command_scenario_input' not in st.session_state:
        st.session_state.command_scenario_input = ""
    if 'command_analysis_result' not in st.session_state:
        st.session_state.command_analysis_result = ""
    if 'command_tool_selection' not in st.session_state:
        st.session_state.command_tool_selection = "Qualquer Ferramenta"
    if 'command_os_selection' not in st.session_state:
        st.session_state.command_os_selection = "Linux/macOS (Bash)"

    def reset_command_orchestrator():
        st.session_state.command_scenario_input = ""
        st.session_state.command_analysis_result = ""
        st.session_state.command_tool_selection = "Qualquer Ferramenta"
        st.session_state.command_os_selection = "Linux/macOS (Bash)"
        logging.info("Tactical Command Orchestrator: Reset de campos.")
        st.rerun()

    if st.button("Limpar Orquestrador", key="reset_command_orchestrator_button"):
        reset_command_orchestrator()

    scenario_input = st.text_area(
        "Descreva o cen√°rio e seu objetivo (Ex: 'Preciso de um comando Nmap para escanear portas UDP em 192.168.1.100', 'Como fa√ßo um brute-force de login em um formul√°rio web com Hydra?'):",
        value=st.session_state.command_scenario_input,
        placeholder="Ex: Escanear portas TCP em um host, encontrar diret√≥rios ocultos, criar payload de shell reverso.",
        height=150,
        key="command_scenario_input_area"
    )
    st.session_state.command_scenario_input = scenario_input.strip()

    tool_options = [
        "Qualquer Ferramenta", "Nmap", "Metasploit", "Burp Suite (comandos curl/HTTP)",
        "SQLmap", "Hydra", "ffuf", "Nuclei", "Subfinder", "Httpx", "Wpscan", "Other"
    ]
    selected_tool = st.selectbox(
        "Ferramenta Preferida (Opcional):",
        options=tool_options,
        index=tool_options.index(st.session_state.command_tool_selection),
        key="command_tool_select"
    )
    st.session_state.command_tool_selection = selected_tool

    os_options = ["Linux/macOS (Bash)", "Windows (PowerShell/CMD)"]
    selected_os = st.selectbox(
        "Sistema Operacional para o Comando:",
        options=os_options,
        index=os_options.index(st.session_state.command_os_selection),
        key="command_os_select"
    )
    st.session_state.command_os_selection = selected_os

    if st.button("Gerar Comando T√°tico", key="generate_command_button"):
        if not st.session_state.command_scenario_input:
            st.error("Por favor, descreva o cen√°rio para gerar o comando.")
            logging.warning("Tactical Command Orchestrator: Gera√ß√£o abortada, cen√°rio vazio.")
            return
        else:
            with st.spinner("Gerando comando t√°tico otimizado..."):
                logging.info(f"Tactical Command Orchestrator: Gerando comando para cen√°rio '{st.session_state.command_scenario_input}'.")
                target_tool_text = f"Usando a ferramenta '{st.session_state.command_tool_selection}'." if st.session_state.command_tool_selection != "Qualquer Ferramenta" else ""
                target_os_text = f"O comando deve ser para o sistema operacional '{st.session_state.command_os_selection}'."
                
                # --- INJETANDO O CONTEXTO GLOBAL ---
                global_context_prompt = get_global_context_prompt()
                # --- FIM INJE√á√ÉO DE CONTEXTO ---


                command_prompt = (
                    f"Voc√™ √© um especialista em pentest e automa√ß√£o, com vasto conhecimento em ferramentas de linha de comando. "
                    f"{global_context_prompt}" # INJETANDO CONTEXTO GLOBAL
                    f"\n\nSua tarefa √© gerar um comando de linha de comando preciso e otimizado para o seguinte cen√°rio:\n"
                    f"**Cen√°rio do Usu√°rio:** '{st.session_state.command_scenario_input}'.\n"
                    f"{target_tool_text}\n"
                    f"{target_os_text}"
                    f"\n\nForne√ßa as seguintes informa√ß√µes em Markdown:\n\n"
                    f"## 1. Comando Sugerido\n"
                    f"Apresente o comando COMPLETO e PRONTO PARA USO. Encapsule-o em um bloco de c√≥digo Markdown (` ```bash `, ` ```powershell `, ` ```cmd ` ou similar, de acordo com o OS). "
                    f"Inclua todos os par√¢metros necess√°rios e exemplos de placeholder (ex: `<IP_ALVO>`, `<USUARIO>`, `<SENHA_LIST>`).\n\n"
                    f"## 2. Explica√ß√£o do Comando\n"
                    f"Explique cada parte do comando, seus par√¢metros e por que ele √© eficaz para o cen√°rio. Detalhe como o usu√°rio pode adapt√°-lo.\n\n"
                    f"## 3. Observa√ß√µes de Seguran√ßa/Melhores Pr√°ticas\n"
                    f"Adicione quaisquer observa√ß√µes de seguran√ßa, como a necessidade de autoriza√ß√£o, riscos potenciais, ou considera√ß√µes sobre o ambiente (ex: firewalls, WAFs). Sugira varia√ß√µes ou pr√≥ximos passos.\n\n"
                    f"Seu objetivo √© ser extremamente pr√°tico, √∫til e direto. Se o cen√°rio for invi√°vel ou muito gen√©rico, explique por que e sugira um refinamento."
                )

                command_result_raw = obter_resposta_llm(llm_model_text, [command_prompt])

                if command_result_raw:
                    st.session_state.command_analysis_result = command_result_raw
                    logging.info("Tactical Command Orchestrator: Comando gerado com sucesso.")
                else:
                    st.session_state.command_analysis_result = "N√£o foi poss√≠vel gerar o comando. Tente refinar a descri√ß√£o do cen√°rio."
                    logging.error("Tactical Command Orchestrator: Falha ao gerar comando pelo LLM.")

    if st.session_state.command_analysis_result:
        st.subheader("Comando T√°tico Gerado")
        st.markdown(st.session_state.command_analysis_result)
        # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="command_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback Tactical Command Orchestrator: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="command_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback Tactical Command Orchestrator: Precisa de Melhoria.")

# Substitua sua fun√ß√£o pentest_narrative_generator_page existente por esta vers√£o completa e aprimorada.

def pentest_narrative_generator_page(llm_model_vision, llm_model_text):
    st.header("Pentest Narrative Generator üìù")
    st.markdown("""
        Gere uma narrativa de relat√≥rio de pentest abrangente e profissional. Forne√ßa os fatos brutos
        para cada evid√™ncia, e a IA ir√° expandir os achados em textos ricos e contextuais, prontos para o seu relat√≥rio.
    """)
    logging.info("P√°gina Pentest Narrative Generator (Aprimorada) acessada.")

    # --- INICIALIZA√á√ÉO E RESET (L√≥gica Mantida) ---
    # Vari√°veis de sess√£o para esta p√°gina
    if 'narrative_client_name' not in st.session_state: st.session_state.narrative_client_name = ""
    if 'narrative_app_name' not in st.session_state: st.session_state.narrative_app_name = ""
    if 'narrative_pentest_type' not in st.session_state: st.session_state.narrative_pentest_type = "Web Application"
    if 'narrative_recon_evidences' not in st.session_state: st.session_state.narrative_recon_evidences = []
    if 'narrative_vuln_evidences' not in st.session_state: st.session_state.narrative_vuln_evidences = []
    if 'narrative_resilience_evidences' not in st.session_state: st.session_state.narrative_resilience_evidences = []
    if 'generated_narrative_output' not in st.session_state: st.session_state.generated_narrative_output = ""

    def reset_narrative_generator():
        st.session_state.narrative_client_name = ""
        st.session_state.narrative_app_name = ""
        st.session_state.narrative_pentest_type = "Web Application"
        st.session_state.narrative_recon_evidences = []
        st.session_state.narrative_vuln_evidences = []
        st.session_state.narrative_resilience_evidences = []
        st.session_state.generated_narrative_output = ""
        logging.info("Pentest Narrative Generator: Campos e resultados limpos.")
        st.rerun()

    if st.button("Limpar e Gerar Nova Narrativa", key="reset_narrative_button"):
        reset_narrative_generator()

    # --- SE√á√ÉO 1: DETALHES DO PROJETO (L√≥gica Mantida) ---
    st.subheader("1. Detalhes do Projeto")
    # ... (O c√≥digo para Nome do Cliente, Nome da Aplica√ß√£o e Tipo de Pentest permanece o mesmo) ...
    st.session_state.narrative_client_name = st.text_input(
        "Nome do Cliente:",
        value=st.session_state.narrative_client_name,
        placeholder="Ex: Minha Empresa S.A.",
        key="narrative_client_input"
    )
    st.session_state.narrative_app_name = st.text_input(
        "Nome da Aplica√ß√£o/Sistema Testado:",
        value=st.session_state.narrative_app_name,
        placeholder="Ex: Plataforma de E-commerce",
        key="narrative_app_input"
    )
    pentest_type_options = ["Web Application", "API", "Infrastructure", "Mobile"]
    st.session_state.narrative_pentest_type = st.selectbox(
        "Tipo de Pentest Principal:",
        options=pentest_type_options,
        index=pentest_type_options.index(st.session_state.narrative_pentest_type),
        key="narrative_pentest_type_select_narrative",
        help="O LLM adaptar√° a narrativa e o foco das vulnerabilidades com base neste tipo de pentest."
    )


    # --- SE√á√ÉO 2: EVID√äNCIAS (L√ìGICA ATUALIZADA) ---
    st.subheader("2. Detalhamento das Evid√™ncias por Categoria")
    st.info("Adicione suas evid√™ncias (imagens e fatos brutos). A IA usar√° esses dados para construir a narrativa.")

    # --- Evid√™ncias de Reconhecimento ---
    with st.expander("Evid√™ncias de Reconhecimento e Mapeamento", expanded=True):
        new_recon_files = st.file_uploader("Adicionar imagens de Reconhecimento:", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="recon_uploader")
        if new_recon_files:
            # ... (L√≥gica de upload de arquivos mantida, mas atualizamos os campos do dicion√°rio) ...
            for uploaded_file in new_recon_files:
                # Simplificando para focar na l√≥gica principal
                 st.session_state.narrative_recon_evidences.append({
                        'image': Image.open(uploaded_file), 'finding_name': '', 'raw_description': '', 'report_image_filename': uploaded_file.name,
                        'raw_tool_output': '', 'id': str(uuid.uuid4()), 'name': uploaded_file.name
                    })

        for i, ev in enumerate(st.session_state.narrative_recon_evidences):
            st.markdown(f"--- \n **Recon Evid√™ncia #{i+1}:** `{ev['name']}`")
            st.image(ev['image'], width=300)
            ev['finding_name'] = st.text_input("Nome do Achado de Reconhecimento:", value=ev.get('finding_name', ''), placeholder="Ex: Subdom√≠nio de Desenvolvimento Exposto", key=f"recon_name_{ev['id']}")
            ev['raw_description'] = st.text_area("Descri√ß√£o Bruta (Fatos):", value=ev.get('raw_description', ''), placeholder="Ex: Encontrado o subdom√≠nio dev.empresa.com, que est√° publicamente acess√≠vel.", key=f"recon_desc_{ev['id']}", height=75)
            # ... (Campos para nome do arquivo e output de ferramenta mantidos) ...

    # --- Evid√™ncias de Vulnerabilidades ---
    with st.expander("Evid√™ncias de Vulnerabilidades Encontradas", expanded=True):
        new_vuln_files = st.file_uploader("Adicionar imagens de Vulnerabilidades:", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="vuln_uploader")
        if new_vuln_files:
            # ... (L√≥gica de upload de arquivos mantida, com novos campos) ...
             for uploaded_file in new_vuln_files:
                st.session_state.narrative_vuln_evidences.append({
                        'image': Image.open(uploaded_file), 'vulnerability_name': '', 'severity': 'M√©dia', 'affected_endpoint': '', 'poc': '', 'context': '',
                        'report_image_filename': uploaded_file.name, 'id': str(uuid.uuid4()), 'name': uploaded_file.name
                    })

        for i, ev in enumerate(st.session_state.narrative_vuln_evidences):
            st.markdown(f"--- \n **Vulnerabilidade Evid√™ncia #{i+1}:** `{ev['name']}`")
            st.image(ev['image'], width=300)
            ev['vulnerability_name'] = st.text_input("Nome da Vulnerabilidade:", value=ev.get('vulnerability_name', ''), placeholder="Ex: SQL Injection Blind", key=f"vuln_name_{ev['id']}")
            ev['severity'] = st.selectbox("Severidade:", ["Cr√≠tica", "Alta", "M√©dia", "Baixa", "Informativa"], index=2, key=f"vuln_sev_{ev['id']}")
            ev['affected_endpoint'] = st.text_input("Endpoint/Par√¢metro Afetado:", value=ev.get('affected_endpoint', ''), placeholder="Ex: GET /api/products?id=...", key=f"vuln_endpoint_{ev['id']}")
            ev['poc'] = st.text_area("Prova de Conceito (PoC) Simples:", value=ev.get('poc', ''), placeholder="Ex: 1' AND (SELECT 1 FROM (SELECT(SLEEP(5)))a)-- -", key=f"vuln_poc_{ev['id']}", height=75)
            ev['context'] = st.text_area("Observa√ß√µes/Contexto Adicional:", value=ev.get('context', ''), placeholder="Ex: A aplica√ß√£o n√£o usa prepared statements.", key=f"vuln_context_{ev['id']}", height=75)
            # ... (Campo para nome do arquivo mantido) ...

    # --- Evid√™ncias de Resili√™ncia ---
    with st.expander("Evid√™ncias de Testes de Resili√™ncia (Pontos Fortes)", expanded=True):
        new_res_files = st.file_uploader("Adicionar imagens de Resili√™ncia:", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="res_uploader")
        if new_res_files:
            # ... (L√≥gica de upload de arquivos mantida, com novos campos) ...
             for uploaded_file in new_res_files:
                st.session_state.narrative_resilience_evidences.append({
                        'image': Image.open(uploaded_file), 'control_name': '', 'positive_description': '', 'report_image_filename': uploaded_file.name,
                        'raw_tool_output': '', 'id': str(uuid.uuid4()), 'name': uploaded_file.name
                    })

        for i, ev in enumerate(st.session_state.narrative_resilience_evidences):
            st.markdown(f"--- \n **Resili√™ncia Evid√™ncia #{i+1}:** `{ev['name']}`")
            st.image(ev['image'], width=300)
            ev['control_name'] = st.text_input("Controle de Seguran√ßa Testado:", value=ev.get('control_name', ''), placeholder="Ex: Prote√ß√£o contra Clickjacking (X-Frame-Options)", key=f"res_name_{ev['id']}")
            ev['positive_description'] = st.text_area("Descri√ß√£o do Resultado Positivo:", value=ev.get('positive_description', ''), placeholder="Ex: O header X-Frame-Options: SAMEORIGIN foi encontrado.", key=f"res_desc_{ev['id']}", height=75)
            # ... (Campos para nome do arquivo e output de ferramenta mantidos) ...

    # --- SE√á√ÉO 3: GERA√á√ÉO DA NARRATIVA (L√ìGICA ATUALIZADA) ---
    st.subheader("3. Gerar Narrativa")
    if st.button("Gerar Narrativa de Pentest Aprimorada", key="generate_rich_narrative_button"):
        # ... (Valida√ß√µes de campos de projeto mantidas) ...

        with st.spinner("A IA est√° escrevendo as narrativas detalhadas para cada achado..."):
            
            # Textos gerados para cada se√ß√£o
            recon_narratives = []
            vuln_narratives = []
            resilience_narratives = []
            conclusion_narrative = ""

            # 1. Gerar narrativas de Reconhecimento
            for ev in st.session_state.narrative_recon_evidences:
                prompt = f"""Voc√™ √© um analista de intelig√™ncia de amea√ßas escrevendo a se√ß√£o de mapeamento de superf√≠cie de ataque. Com base na evid√™ncia:
                            - Achado: {ev['finding_name']}
                            - Descri√ß√£o Bruta: {ev['raw_description']}
                            Elabore um par√°grafo rico para o relat√≥rio, explicando o achado, seu significado do ponto de vista de um atacante e os riscos potenciais.
                         """
                recon_narratives.append(obter_resposta_llm(llm_model_text, [prompt]))

            # 2. Gerar narrativas de Vulnerabilidades
            for ev in st.session_state.narrative_vuln_evidences:
                prompt = f"""Voc√™ √© um especialista em ciberseguran√ßa e redator t√©cnico. Com base nas informa√ß√µes:
                            - Nome da Vulnerabilidade: {ev['vulnerability_name']}
                            - Endpoint Afetado: {ev['affected_endpoint']}
                            - Prova de Conceito: {ev['poc']}
                            - Contexto Adicional: {ev['context']}
                            Gere uma se√ß√£o detalhada para o relat√≥rio, contendo os t√≥picos "Descri√ß√£o T√©cnica", "Prova de Conceito (PoC)" e "An√°lise de Risco e Impacto no Neg√≥cio". N√ÉO inclua recomenda√ß√µes de mitiga√ß√£o ou refer√™ncias externas.
                         """
                vuln_narratives.append(obter_resposta_llm(llm_model_text, [prompt]))

            # 3. Gerar narrativas de Resili√™ncia
            for ev in st.session_state.narrative_resilience_evidences:
                prompt = f"""Voc√™ √© um consultor de seguran√ßa s√™nior redigindo a se√ß√£o de pontos fortes. Com base no teste:
                            - Controle Testado: {ev['control_name']}
                            - Descri√ß√£o do Resultado Positivo: {ev['positive_description']}
                            Elabore um par√°grafo profissional para o relat√≥rio, descrevendo o controle, o ataque que ele previne e por que √© uma boa pr√°tica de seguran√ßa.
                         """
                resilience_narratives.append(obter_resposta_llm(llm_model_text, [prompt]))

            # 4. Gerar Conclus√£o
            # (A l√≥gica para gerar a conclus√£o pode ser mantida ou aprimorada tamb√©m)
            # ...

            # 5. Montar o Relat√≥rio Final
            final_report = f"""
# Relat√≥rio de An√°lise de Seguran√ßa para {st.session_state.narrative_app_name}

## Introdu√ß√£o
(Sua introdu√ß√£o padr√£o pode ser mantida aqui...)

## 1. Achados de Reconhecimento e Mapeamento
{"\n\n---\n\n".join(recon_narratives) if recon_narratives else "Nenhum achado de reconhecimento foi detalhado."}

## 2. Vulnerabilidades Identificadas
{"\n\n---\n\n".join(vuln_narratives) if vuln_narratives else "Nenhuma vulnerabilidade foi encontrada ou detalhada."}

## 3. Pontos Fortes e Controles de Seguran√ßa Eficazes
{"\n\n---\n\n".join(resilience_narratives) if resilience_narratives else "Nenhum ponto de resili√™ncia foi detalhado."}

## 4. Conclus√£o
(Sua conclus√£o gerada pela IA pode ser inserida aqui...)
            """
            st.session_state.generated_narrative_output = final_report.strip()

    # --- Exibi√ß√£o do Relat√≥rio Final (L√≥gica Mantida) ---
    if st.session_state.generated_narrative_output:
        st.subheader("Narrativa de Pentest Gerada:")
        st.markdown(st.session_state.generated_narrative_output)
        # ... (O c√≥digo para os bot√µes de download e feedback permanece o mesmo) ...

        col_download_md, col_download_txt = st.columns(2)
        with col_download_md:
            st.download_button(
                label="Download Narrativa (.md)",
                data=st.session_state.generated_narrative_output.encode('utf-8'),
                file_name=f"narrativa_{st.session_state.narrative_client_name.replace(' ','_')}_{st.session_state.narrative_app_name.replace(' ','_')}.md",
                mime="text/markdown",
                help="Baixe a narrativa em formato Markdown, ideal para seu relat√≥rio."
            )
        with col_download_txt:
            st.download_button(
                label="Download Narrativa (.txt)",
                data=st.session_state.generated_narrative_output.encode('utf-8'),
                file_name=f"narrativa_{st.session_state.narrative_client_name.replace(' ','_')}_{st.session_state.narrative_app_name.replace(' ','_')}.txt",
                mime="text/plain",
                help="Baixe a narrativa em formato de texto simples."
            )
        
        # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="narrative_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback Pentest Narrative Generator: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="narrative_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback Pentest Narrative Generator: Precisa de Melhoria.")

def parse_vulnerability_summary(text_response):
    """Extrai o resumo de vulnerabilidades da resposta do LLM."""
    summary = {
        "Total": 0,
        "Cr√≠ticos": 0,
        "Altos": 0,
        "M√©dios": 0,
        "Baixos": 0
    }

    # Procura pela linha de resumo
    summary_line = None
    lines = text_response.split('\n')
    for line in lines:
        if line.strip().startswith("Total de Achados"):
            summary_line = line
            break

    if not summary_line:
        logging.warning("Mobile Static Analyzer: Resumo de vulnerabilidades n√£o encontrado na resposta do LLM.")
        return summary

    # Extrair n√∫meros com regex
    matches = re.findall(r'(\d+)', summary_line)
    if len(matches) >= 5:
        summary["Total"] = int(matches[0])
        summary["Cr√≠ticos"] = int(matches[1])
        summary["Altos"] = int(matches[2])
        summary["M√©dios"] = int(matches[3])
        summary["Baixos"] = int(matches[4])

    return summary


def parse_vulnerability_details(text_response):
    """Extrai os detalhes das vulnerabilidades a partir da resposta do LLM."""
    details = []
    blocks = re.split(r'\n\s*###\s*', text_response)[1:]  # Ignora o bloco antes do primeiro ###

    for block in blocks:
        lines = block.strip().split('\n')
        if not lines:
            continue

        name = re.sub(r'\*\*Nome da Vulnerabilidade:\*\*', '', lines[0]).strip()
        category = re.sub(r'\*\*Categoria OWASP Mobile.*:\*\*', '', lines[1]).strip()
        severity = re.sub(r'\*\*Severidade/Risco:\*\*', '', lines[2]).strip()
        location = re.sub(r'\*\*Localiza√ß√£o na Especifica√ß√£o:\*\*', '', lines[3]).strip()
        detail = re.sub(r'\*\*Detalhes:\*\*', '', lines[4]).strip()

        if name and category and severity and location and detail:
            details.append({
                "name": name,
                "category": category,
                "severity": severity,
                "location": location,
                "details": detail
            })

    return details


def mobile_app_static_analysis_page(llm_model_vision, llm_model_text):
    st.header("Mobile Static Analyzer üì±")
    st.markdown("""
    Realize an√°lise est√°tica de seguran√ßa em aplicativos Android.  
    Fa√ßa upload de um arquivo `.zip` contendo o APK descompilado (sa√≠da de ferramentas como `apktool -d` ou `jadx -d`),  
    ou cole trechos de c√≥digo ou o `AndroidManifest.xml` diretamente.  

    O HuntIA ir√° analisar o conte√∫do para identificar vulnerabilidades com base na **OWASP Mobile Top 10** e fornecer recomenda√ß√µes.

    ‚ö†Ô∏è **AVISO:** Esta √© uma an√°lise est√°tica de *primeira linha* e n√£o substitui uma revis√£o de c√≥digo manual completa.
    """)
    logging.info("P√°gina Mobile Static Analyzer acessada.")

    # Inicializar vari√°veis de sess√£o
    if 'mobile_analysis_type' not in st.session_state:
        st.session_state.mobile_analysis_type = "Upload ZIP (APK Descompilado)"
    if 'uploaded_decompiled_zip' not in st.session_state:
        st.session_state.uploaded_decompiled_zip = None
    if 'manifest_content' not in st.session_state:
        st.session_state.manifest_content = ""
    if 'code_snippet_content' not in st.session_state:
        st.session_state.code_snippet_content = ""
    if 'mobile_analysis_result' not in st.session_state:
        st.session_state.mobile_analysis_result = ""
    if 'mobile_analysis_summary' not in st.session_state:
        st.session_state.mobile_analysis_summary = None

    def reset_mobile_analysis():
        st.session_state.mobile_analysis_type = "Upload ZIP (APK Descompilado)"
        st.session_state.uploaded_decompiled_zip = None
        st.session_state.manifest_content = ""
        st.session_state.code_snippet_content = ""
        st.session_state.mobile_analysis_result = ""
        st.session_state.mobile_analysis_summary = None
        logging.info("Mobile Static Analyzer: Reset de campos.")
        st.rerun()

    if st.button("Limpar An√°lise Mobile", key="reset_mobile_analysis_button"):
        reset_mobile_analysis()

    # Tipo de an√°lise
    analysis_type_options = [
        "Upload ZIP (APK Descompilado)",
        "Colar AndroidManifest.xml",
        "Colar Trecho de C√≥digo (Java/Smali/Kotlin)"
    ]
    st.session_state.mobile_analysis_type = st.radio(
        "Como deseja fornecer o conte√∫do para an√°lise?",
        options=analysis_type_options,
        key="mobile_analysis_type_radio"
    )

    analyzed_content = ""
    analysis_context = ""

    # Upload ZIP
    if st.session_state.mobile_analysis_type == "Upload ZIP (APK Descompilado)":
        uploaded_zip_file = st.file_uploader("Selecione o arquivo .zip do APK descompilado:", type=["zip"], key="mobile_zip_uploader")
        if uploaded_zip_file:
            st.session_state.uploaded_decompiled_zip = uploaded_zip_file
            with tempfile.TemporaryDirectory() as tmpdir:
                try:
                    with zipfile.ZipFile(uploaded_zip_file, 'r') as zip_ref:
                        zip_ref.extractall(tmpdir)

                    manifest_path = os.path.join(tmpdir, "AndroidManifest.xml")
                    if os.path.exists(manifest_path):
                        with open(manifest_path, 'r', encoding='utf-8', errors='ignore') as f:
                            st.session_state.manifest_content = f.read()
                        analysis_context += f"Conte√∫do do AndroidManifest.xml:```xml{st.session_state.manifest_content}```"

                    code_files_content = []
                    max_code_size = 200 * 1024  # 200KB
                    current_code_size = 0
                    code_file_count = 0

                    for root, _, files in os.walk(tmpdir):
                        for file in files:
                            if file.endswith(".java") or file.endswith(".smali") or file.endswith(".kt"):
                                file_path = os.path.join(root, file)
                                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                                    content = f.read()
                                    if current_code_size + len(content) > max_code_size:
                                        logging.info("Mobile Static Analyzer: Limite de tamanho de c√≥digo atingido.")
                                        break
                                    code_files_content.append(f"- C√≥digo de: {file}\n{content}")
                                    current_code_size += len(content)
                                    code_file_count += 1

                        if current_code_size >= max_code_size:
                            break

                    if code_files_content:
                        st.session_state.code_snippet_content = "\n\n".join(code_files_content)
                        analysis_context += f"Trechos de C√≥digo (total {code_file_count} arquivos, {current_code_size / 1024:.2f} KB):```{st.session_state.code_snippet_content}```"
                        logging.info(f"Mobile Static Analyzer: {code_file_count} arquivos de c√≥digo processados.")
                    else:
                        st.info("Nenhum arquivo de c√≥digo relevante encontrado no ZIP.")
                        logging.info("Mobile Static Analyzer: Nenhum arquivo de c√≥digo encontrado no ZIP.")

                except Exception as e:
                    st.error(f"Erro ao processar o arquivo ZIP: {e}")
                    logging.exception(f"Mobile Static Analyzer: Erro ao processar ZIP: {e}.")
                    st.session_state.uploaded_decompiled_zip = None

            analyzed_content = analysis_context.replace('{', '{{').replace('}', '}}')

    elif st.session_state.mobile_analysis_type == "Colar AndroidManifest.xml":
        st.session_state.manifest_content = st.text_area(
            "Cole o conte√∫do do AndroidManifest.xml aqui:",
            value=st.session_state.manifest_content,
            placeholder="<manifest ...><uses-permission android:name=\"android.permission.INTERNET\"/>...</manifest>",
            height=400,
            key="manifest_input_area"
        )
        escaped_manifest = st.session_state.manifest_content.replace('{', '{{').replace('}', '}}')
        analyzed_content = f"Conte√∫do do AndroidManifest.xml:```xml{escaped_manifest}```"
        logging.info("Mobile Static Analyzer: Conte√∫do do AndroidManifest.xml lido.")

    elif st.session_state.mobile_analysis_type == "Colar Trecho de C√≥digo (Java/Smali/Kotlin)":
        st.session_state.code_snippet_content = st.text_area(
            "Cole trechos de c√≥digo Java/Smali/Kotlin aqui (mantenha relevante e conciso):",
            value=st.session_state.code_snippet_content,
            placeholder="Ex: public class SecretHolder {\nprivate static final String API_KEY = \"sk-123xyz\";\n}",
            height=400,
            key="code_snippet_input_area"
        )
        escaped_code = st.session_state.code_snippet_content.replace('{', '{{').replace('}', '}}')
        analyzed_content = f"Trecho de C√≥digo para An√°lise:```java{escaped_code}```"
        logging.info("Mobile Static Analyzer: Trecho de c√≥digo colado pelo usu√°rio.")

    if st.button("Analisar Aplicativo Mobile", key="analyze_mobile_app_button"):
        if not analyzed_content.strip():
            st.error("Por favor, forne√ßa o conte√∫do para an√°lise.")
            logging.warning("Mobile Static Analyzer: An√°lise abortada, conte√∫do vazio.")
            return

        with st.spinner("Analisando aplicativo mobile estaticamente com LLM..."):
            logging.info("Mobile Static Analyzer: Iniciando an√°lise est√°tica.")

            global_context_prompt = get_global_context_prompt()

            mobile_analysis_prompt = (
                f"Voc√™ √© um especialista em seguran√ßa de aplicativos m√≥veis e pentest, com profundo conhecimento na **OWASP Mobile Top 10 (2024)**.\n"
                f"{global_context_prompt}\n\n"
                f"Sua tarefa √© analisar o conte√∫do descompilado de um aplicativo Android (APK) fornecido a seguir. Identifique **TODAS as potenciais vulnerabilidades de seguran√ßa** com base nas categorias da OWASP Mobile Top 10, bem como outras falhas comuns em aplicativos mobile.\n\n"
                f"**RESUMO:** Forne√ßa um resumo quantitativo na PRIMEIRA LINHA da sua resposta, no formato exato: `Total de Achados: X | Cr√≠ticos: Y | Altos: Z | M√©dios: W | Baixos: V` (substitua X,Y,Z,W,V pelos n√∫meros correspondentes). Se n√£o houver achados, use 0.\n\n"
                f"Para cada **achado de seguran√ßa** identificado, apresente de forma concisa e pr√°tica, utilizando Markdown para formata√ß√£o:\n\n"
                f"### [Nome da Vulnerabilidade] (Ex: Chave de API Hardcoded, Comunica√ß√£o N√£o Criptografada)\n"
                f"**Categoria OWASP Mobile (2024):** [Ex: M1: Improper Platform Usage]\n"
                f"**Severidade/Risco:** [Alta/M√©dia/Baixa - explique o impacto espec√≠fico para esta vulnerabilidade]\n"
                f"**Localiza√ß√£o na Especifica√ß√£o:** Indique onde foi encontrada a vulnerabilidade (ex: `AndroidManifest.xml`, `MainActivity.java`).\n"
                f"**Detalhes:** Explique o problema t√©cnico e como ele ocorre.\n\n"
                f"**Conte√∫do para An√°lise:**\n{analyzed_content}\n\n"
                f"Se n√£o encontrar vulnerabilidades √≥bvias, indique isso claramente."
            )

            analysis_result_raw = obter_resposta_llm(llm_model_text, [mobile_analysis_prompt])
            if analysis_result_raw:
                st.session_state.mobile_analysis_result = analysis_result_raw
                st.session_state.mobile_analysis_summary = parse_vulnerability_summary(analysis_result_raw)
                logging.info("Mobile Static Analyzer: An√°lise conclu√≠da com sucesso.")
            else:
                st.session_state.mobile_analysis_result = "N√£o foi poss√≠vel realizar a an√°lise est√°tica mobile. Tente refinar o conte√∫do ou ajustar o APK descompilado."
                st.session_state.mobile_analysis_summary = None
                logging.error("Mobile Static Analyzer: Falha na an√°lise pelo LLM.")

    # Exibir resultados
    if st.session_state.mobile_analysis_result:
        st.subheader("Resultados da An√°lise Est√°tica Mobile")

        if st.session_state.mobile_analysis_summary:
            cols = st.columns(5)
            cols[0].metric("Total", st.session_state.mobile_analysis_summary.get("Total", 0))
            cols[1].metric("Cr√≠ticos", st.session_state.mobile_analysis_summary.get("Cr√≠ticos", 0))
            cols[2].metric("Altos", st.session_state.mobile_analysis_summary.get("Altos", 0))
            cols[3].metric("M√©dios", st.session_state.mobile_analysis_summary.get("M√©dios", 0))
            cols[4].metric("Baixos", st.session_state.mobile_analysis_summary.get("Baixos", 0))

        vulnerability_details = parse_vulnerability_details(st.session_state.mobile_analysis_result)

        if vulnerability_details:
            for vuln in vulnerability_details:
                st.markdown(f"### {vuln['name']}")
                st.markdown(f"**Categoria OWASP Mobile (2024):** {vuln['category']}")
                st.markdown(f"**Severidade/Risco:** {vuln['severity']}")
                st.markdown(f"**Localiza√ß√£o na Especifica√ß√£o:** {vuln['location']}")
                st.markdown(f"**Detalhes:** {vuln['details']}")
                st.markdown("---")
        else:
            st.info("Nenhuma vulnerabilidade detalhada encontrada na resposta do LLM.")

        # Feedback Buttons
        cols_feedback = st.columns(2)
        if cols_feedback[0].button("üëç √ötil", key="mobile_analysis_feedback_good"):
            st.toast("Obrigado pelo seu feedback! Isso nos ajuda a melhorar.", icon="üòä")
            logging.info("Feedback Mobile Static Analyzer: √ötil.")
        if cols_feedback[1].button("üëé Precisa de Melhoria", key="mobile_analysis_feedback_bad"):
            st.toast("Obrigado pelo seu feedback. Continuaremos trabalhando para aprimorar.", icon="üòî")
            logging.info("Feedback Mobile Static Analyzer: Precisa de Melhoria.")


# --- Main Application Logic ---
def main():
    llm_model_vision, llm_model_text = get_gemini_models_cached()

    if not llm_model_vision or not llm_model_text:
        st.warning("Modelos LLM n√£o carregados. Algumas funcionalidades podem n√£o estar dispon√≠veis.")
        return

    # Inicializa estados globais
    if 'global_profile' not in st.session_state: st.session_state.global_profile = "Nenhum"
    if 'global_scenario' not in st.session_state: st.session_state.global_scenario = "Nenhum"
    if 'projeto_ativo_id' not in st.session_state: st.session_state.projeto_ativo_id = None
    if 'projeto_ativo_nome' not in st.session_state: st.session_state.projeto_ativo_nome = None
    if 'modo_rascunho' not in st.session_state: st.session_state.modo_rascunho = True
    
    with st.sidebar:
        # L√≥gica do expander para a navega√ß√£o
        with st.expander("Navega√ß√£o Principal", expanded=True):
            selected = option_menu(
                menu_title=None,
                options=[
                    "In√≠cio",
                    "Configura√ß√µes",
                    "Pentest Copilot", # <-- NOVO M√ìDULO CONSOLIDADO
                    "Correlation Dashboard",
                    "OWASP Vulnerability Details",
                    "Deep HTTP Insight",
                    "OWASP Image Analyzer",
                    "OpenAPI Analyzer",
                    "Static Code Analyzer",
                    "Pentest Narrative Generator",
                    "Mobile Static Analyzer"
                ],
                icons=[
                    "house", "gear-fill", "robot", # <-- NOVO √çCONE
                    "diagram-3", "bug", "globe", "image", "file-earmark-richtext", 
                    "code-slash", "check-square", "file-earmark-text", "phone"
                ],
                menu_icon="tools",
                default_index=0,
                 styles={
                    "container": {"padding": "0!important", "background-color": "#262730"},
                    "icon": {"color": "#E50000", "font-size": "20px"},
                    "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#4a4a5c"},
                    "nav-link-selected": {"background-color": "#E50000"},
                }
            )
        
        st.sidebar.markdown("---")
        st.sidebar.download_button(
            label="Download Log do Aplicativo",
            data=get_log_file_content(),
            file_name="huntia_application.log",
            mime="text/plain"
        )

    # L√≥gica de roteamento para cada p√°gina da aplica√ß√£o
    if selected == "In√≠cio":
        home_page()
    elif selected == "Configura√ß√µes":
        settings_page()
    elif selected == "Pentest Copilot":
        pentest_copilot_page(llm_model_text) # <-- ROTA PARA A NOVA P√ÅGINA
    elif selected == "Correlation Dashboard":
        correlation_dashboard_page(llm_model_text)
    elif selected == "OWASP Vulnerability Details":
        owasp_text_analysis_page(llm_model_vision, llm_model_text)
    elif selected == "Deep HTTP Insight":
        http_request_analysis_page(llm_model_vision, llm_model_text)
    elif selected == "OWASP Image Analyzer":
        owasp_scout_visual_page(llm_model_vision, llm_model_text)
    elif selected == "Advanced OpenAPI Analzyer":
        advanced_openapi_analyzer_page(llm_model_vision, llm_model_text)
    elif selected == "Static Code Analyzer":
        static_code_analyzer_page(llm_model_text)
    elif selected == "Pentest Narrative Generator":
        pentest_narrative_generator_page(llm_model_vision, llm_model_text)
    elif selected == "Mobile Static Analyzer":
        mobile_app_static_analysis_page(llm_model_vision, llm_model_text)

if __name__ == "__main__":
    main()
